!function(t){var n={};function e(r){if(n[r])return n[r].exports;var l=n[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)e.d(r,l,function(n){return t[n]}.bind(null,l));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={screen:{width:400,height:400},fps:60,camera:{x:0,y:0},stage:{width:1800,height:1800},tilemap:{data:[1,1,1,1,2,1,1,1,1,1,0,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,1,0,1,0,1,0,0,0,0,0,3,0,1,1,1,1,1,1,1,1,1],columns:10,gridWidth:40,gridHeight:40}}},function(t,n,e){"use strict";e.r(n);var r=e(0);class l{constructor(){this.id=i()}}var u=1;function i(){return u++}class c{constructor(t=0){this.entityId=t,this.id=t}}class s{constructor(t=0,n=0){this.id=i(),this.entityId=t,this.priority=n}}class o{constructor(t=0){this.id=i(),this.priority=t}onStart(){}onUpdate(t=0){}onEnd(){}}class a{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class d{constructor(){this.head=new a,this.tail=new a,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function h(){return new d}function f(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let r=t._map.get(n);return r?r.data:(e&&console.error("can't find keyId: ",n),null)}function p(t=null,n=null){return x(t,n,t.tail)}function y(t=null,n=null){let e=n&&n.priority?n.priority:0,r=t.head.next;for(;r!=t.tail&&!(e>r.data.priority);)r=r.next;return x(t,n,r)}function x(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let r=e.prep,l=new a(n,r,e);return r.next=l,e.prep=l,t._map.set(n.id,l),t._size++,l}function g(t=null,n=0){t&&0!=n?t._lock?t._delList.push(n):v(t,n):console.error("error param: ",t,n)}function v(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let r=e.prep,l=e.next;r.next=l,l.prep=r,t._size--}function w(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)v(t,t._delList.pop());t._lock=!1}var m=h();const k=1;const b=2;class _ extends s{constructor(t=0,n=0){super(t,n),this.state=0}isEnd(){return!1}onStop(){this.onEnd()}}function S(t=null,n=0){t.onUpdate(n)}function I(t=null){t.state=b,t.onEnd()}class U extends o{constructor(){super(999)}onUpdate(t=0){w(m,n=>{S(n,t),n.isEnd()&&I(n)})}}var H=null;class E{constructor(t=0,n=0){this.x=t,this.y=n}}function L(t=0,n=0){return new E(t,n)}class P{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function B(t=0,n=0){return new P(t,n)}class z{constructor(t=null,n=0,e=0,r=null){this.offset=t,this.width=n,this.height=e,this.center=r}}function M(t=0,n=0,e=0,r=0){if(0==e||0==r)return null;let l=B(t,n);return new z(l,e,r,L())}function j(t=null){return L(t.center.x-D(t),t.center.y-G(t))}function O(t=null){return L(t.center.x+D(t),t.center.y+G(t))}function V(t=null){return t.width}function C(t=null){return t.height}function D(t=null){return.5*t.width}function G(t=null){return.5*t.height}class R extends c{constructor(t=0,n=0,e=0){super(t),this.pos=L(n,e),this.vec=B()}}var W=h();function T(t=0){let n=f(W,t);return n||function(t=0){let n=new R(t);return p(W,n),n}(t)}function A(t=0,n=0,e=0){let r=T(t).pos;return r.x=n,r.y=e,r}function F(t=0){return T(t).pos}function X(t=0){return T(t).vec}var Y=h();class q{constructor(t=0,n=0,e=0,r=null){this.entityId=t,this.unitPos=null,this.unitVec=null,this.offset=B(n,e),this.rect=r}}function J(t=0,n=0,e=0,r=null){if(!r)return null;let l=new q(t,n,e,r);return l.unitPos=F(t),l.unitVec=X(t),l}function K(t=null){return L(t.unitPos.x+t.offset.x,t.unitPos.y+t.offset.y)}function N(t=null){let n=K(t);return L(n.x-D(t.rect),n.y-G(t.rect))}function Q(t=null){let n=K(t);return L(n.x+D(t.rect),n.y+G(t.rect))}new Map;h();var Z=h();function $(t=0){return t>=0?t:-t}function tt(t=0,n=0){return t>n?t:n}function nt(t=0,n=0){return t<n?t:n}function et(t=null,n=null){let e=K(t),r=K(n);return!($(e.x-r.x)>D(t.rect)+D(n.rect))&&!($(e.y-r.y)>G(t.rect)+G(n.rect))}class rt extends l{constructor(){super(),this.pos=null,this.rect=null}}function lt(t=0,n=0,e=0,r=0){let l=new rt;return l.pos=A(l.id,t,n),l.rect=J(l.id,0,0,M(0,0,e,r)),l}function ut(t=null,n=null){return et(t.rect,n)}function it(t=null,n=null){return function(t=null,n=null){return L(t.x-n.x,t.y-n.y)}(n,N(t.rect))}const ct=87,st=65,ot=83,at=68;var dt={ctx:null,canvas:null,fps:0,tick:0};function ht(){return dt}var ft=ht();Math.PI;function pt(t=null,n=null){return!!function(t=null,n=null){let e=j(t),r=j(n),l=O(t),u=O(n),i=e.x,c=r.x,s=i>c?i:c,o=l.x,a=u.x,d=o<a?o:a;if(d<s)return null;let h=e.y,f=r.y,p=h>f?h:f,y=l.y,x=u.y,g=y<x?y:x;return g<p?null:M(0,0,d-s,g-p)}(t,n)}class yt extends l{constructor(t=0,n=null,e=0){super(),this.entityId=t,this.rect=n,this.tag=e}}class xt extends o{constructor(t=null){this.callback=t}check(t=0,n=null,e=null){return!!pt(n.rect,e.rect)&&(this.callback(t,n,e),!0)}}var gt=h();function vt(){return gt}var wt=h();function mt(){return wt}class kt extends o{onUpdate(t=0){!function(){let t=ft.canvas;ft.ctx.clearRect(0,0,t.width,t.height)}(),w(Z,t=>{let n=F(t.entityId);UpdateRectPosByUnit(t.displayArea,n.x,n.y),function(t=null){let n=_n(),e=t.displayArea;if(!ut(n,e))return;let r=it(n,GetRectStartPos(e)),l=t.spriteFrame.textureArea;!function(t,n=0,e=0,r=0,l=0,u=0,i=0,c=0,s=0){ft.ctx.drawImage(t,n,e,r,l,u,i,c,s)}(t.spriteFrame.bitmapData,l.x,l.y,l.width,l.height,r.x,r.y,V(e),C(e))}(t)})}}var bt=null;class _t extends o{onUpdate(t=0){w(mt(),t=>{It(t.rect)}),w(vt(),t=>{It(t.rect)})}}var St=null;function It(t=null){let n=_n();if(!ut(n,t))return;let e=it(n,N(t));!function(t=0,n=0,e=0,r=0){ft.ctx.strokeRect(t,n,e,r)}(e.x,e.y,V(t.rect),C(t.rect))}class Ut extends o{constructor(){super(100)}onUpdate(t=0){w(Y,t=>{0;let n=t.vec;if(0==n.x&&0==n.y)return;let e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var Ht=null;var Et,Lt=ht();var Pt=!1;var Bt=null,zt=(new Date).getTime();var Mt=new Map;var jt=h(),Ot=h();function Vt(t=!1){y(jt,(H||(H=new U),H)),y(jt,(Ht||(Ht=new Ut),Ht)),p(Ot,(bt||(bt=new kt),bt)),t&&p(Ot,(St||(St=new _t),St))}var Ct=16,Dt=41,Gt=0,Rt=0;function Wt(t){w(jt,t=>{t.onStart()}),w(Ot,t=>{t.onStart()}),t.onStart(),function(t=null){Pt=!1,Et=t,setInterval(()=>{Bt=(new Date).getTime(),Pt||Et(Bt-zt),zt=(new Date).getTime()},Lt.tick)}(n=>{(Gt+=n)>=Ct&&(Gt-=Ct,t.onUpdate(n),w(jt,t=>{t.onUpdate(n)})),(Rt+=n)>=Dt&&(Rt-=Dt,w(Ot,t=>{t.onUpdate(n)}))})}class Tt{constructor(t=0,n=0,e=null){this.rowIndex=t,this.colIndex=n,this.data=e}}class At{constructor(t=0,n=0,e=0,r=0,l=null){this.rows=t,this.columns=n,this.gridWidth=e,this.gridHeight=r,this.grids=l}}function Ft(t=null){return t.gridWidth}function Xt(t=null){return t.gridHeight}function Yt(t=null){return t.columns*t.gridWidth}function qt(t=null){return t.rows*t.gridHeight}class Jt{constructor(t=null,n=0,e=0){this.gridmap=t,this.pos=L(n,e)}}function Kt(t=0,n=0,e=0,r=0,l=0,u=0){let i=function(t=0,n=0,e=0,r=0){let l=[];for(let e=0;e<t;e++)for(let t=0;t<n;t++){let n=new Tt(e,t);l.push(n)}return new At(t,n,e,r,l)}(t,n,e,r);return new Jt(i,l,u)}function Nt(t=null){return L(t.pos.x-.5*Yt(t.gridmap),t.pos.y-.5*qt(t.gridmap))}class Qt{constructor(t=0,n=null,e=0,r=null){this.type1=t,this.type2=e,this.team1=n,this.team2=r,this.mask=t|e,this.id=this.mask}}var Zt=new Map;function $t(t=0){let n=Zt.get(t);return n||(n=new Link,Zt.set(t,n)),n}var tn=h();class nn extends xt{constructor(t=null){super(t)}onUpdate(t=0){w(tn,n=>{n.mask==n.type1?function(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail;){let r=e.next;for(;r!=t.tail;)n(e.data,r.data),r=r.next;e=e.next}t._lock=!1,t._delList.forEach(n=>{g(t,n)})}(n.team1,(e,r)=>{super.check(t,e,r,n.type1,n.type2)}):w(n.team1,e=>{w(n.team2,r=>{super.check(t,e,r,n.type1,n.type2)})})})}}var en=null;h();h();h();class rn extends o{constructor(){super(900)}onUpdate(t=0){w(vt(),t=>{(function(t=null){if(0==(xn=X(t.entityId)).x&&0==xn.y)return!1;gn=D(t.rect.rect),vn=G(t.rect.rect),hn=N(t.rect),fn=Q(t.rect),sn=fn.x+xn.x,on=hn.x+xn.x,an=fn.y+xn.y,dn=hn.y+xn.y;let n=K(t.rect);return un=n.x+xn.x,cn=n.y+xn.y,!0})(t)&&(w(mt(),n=>{!function(t=null,n=null){if(!function(t=null,n=null){let e=K(t),r=L(e.x+t.unitVec.x,e.y+t.unitVec.y),l=K(n),u=L(l.x+n.unitVec.x,l.y+n.unitVec.y);return!($(r.x-u.x)>D(t.rect)+D(n.rect)||$(r.y-u.y)>G(t.rect)+G(n.rect))}(t.rect,n.rect))return;pn=N(n.rect),yn=Q(n.rect),function(){if(0==xn.x)return!1;let t=tt(hn.y,pn.y);if(nt(fn.y,yn.y)<=t)return!1;xn.x>0?pn.x<sn&&(sn=pn.x):yn.x>on&&(on=yn.x);return!0}()||function(){if(0==xn.y)return!1;let t=tt(hn.x,pn.x);if(nt(fn.x,yn.x)<=t)return!1;xn.y>0?pn.y<an&&(an=pn.y):yn.y>dn&&(dn=yn.y)}()}(t,n)}),function(t=null){let n=0;n=xn.x>0?sn-gn:xn.x<0?on+gn:un;let e=0;e=xn.y>0?an-vn:xn.y<0?dn+vn:cn;!function(t=null,n=0,e=0){t.unitVec.x=n-t.unitPos.x,t.unitVec.y=e-t.unitPos.y}(t.rect,n,e)}(t))})}}var ln=null;var un=0,cn=0,sn=0,on=0,an=0,dn=0,hn=null,fn=null,pn=null,yn=null,xn=null,gn=0,vn=0;var wn={useGroup:!1,pairs:[],useBox:!1,callback:null,sysList:[]};function mn(t=null){wn.useGroup=t.useGroup?t.useGroup:wn.useGroup,wn.pairs=t.pairs?t.pairs:wn.pairs,wn.useBox=t.useBox?t.useBox:wn.useBox,wn.callback=t.callback,wn.useBox&&wn.sysList.push(function(t=null){return ln||(ln=new rn(t)),ln}(t.callback)),wn.useGroup&&(wn.sysList.push(function(t=null){return en||(en=new nn(t)),en}(t.callback)),wn.pairs.forEach(t=>{!function(t=0,n=0){let e=$t(t),r=$t(n),l=new Qt(t,e,n,r);p(tn,l)}(t[0],t[1])})),wn.sysList.forEach(t=>{!function(t=null){t&&y(jt,t)}(t)})}function kn(t=null){!function(t=0,n=0,e=10){let r=document.getElementById("canvas");r.width=t,r.height=n,dt.canvas=r,dt.ctx=r.getContext("2d"),dt.ctx.strokeStyle="#0000ff",dt.fps=e,dt.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;Mt.get(e)||(Mt.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;Mt.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){Lt.canvas.addEventListener("mousedown",n=>{let e=canvas.getBoundingClientRect(),r=n.clientX-e.left*(canvas.width/e.width),l=n.clientY-e.top*(canvas.height/e.height);t(r,l)}),Lt.canvas.addEventListener("mouseup",t=>{let e=canvas.getBoundingClientRect(),r=t.clientX-e.left*(canvas.width/e.width),l=t.clientY-e.top*(canvas.height/e.height);n(r,l)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,r=t.height?t.height:n.height;bn=lt(t.x,t.y,e,r)}(t.camera,t.screen),Vt(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,r=parseInt(t.data.length/e);if(r*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let l=Kt(r,e,t.gridWidth,t.gridHeight,t.x,t.y);return n&&function(t=null,n=null){t.grids.forEach(t=>{n(t)})}(l.gridmap,r=>{let u=t.data[r.rowIndex*e+r.colIndex];n(u,l,r)}),l})(t,t.initHandler)}(t.tilemap),t.collide&&mn(t.collide)}var bn=null;function _n(){return bn}class Sn extends _{constructor(t=0,n=0,e=0,r=0){super(t,n),this.dx=e,this.dy=r}onStart(){this.vec=X(this.entityId),function(t=0){f(Y,t)||p(Y,T(t))}(this.entityId)}onUpdate(t=0){this.vec.x+=this.dx,this.vec.y+=this.dy}onEnd(){!function(t=0){g(Y,t)}(this.entityId)}}class In extends c{constructor(t=0){super(t),this.val=0}}var Un=h();function Hn(t=0){let n=f(Un,t);return n||function(t=0){let n=new In(t);return p(Un,n),n}(t)}function En(t=null,n=0){t.val=t.val|n}function Ln(t=null,n=0){t.val=t.val^n}class Pn extends Sn{constructor(t=0,n=0,e=0,r=0){super(t,n,e,r)}onStart(){super.onStart(),this.cmd=Hn(this.entityId)}onUpdate(t=0){let n=this.cmd.val;0!=(15&n)&&(n&Bn?this.vec.x+=this.dx:n&zn&&(this.vec.x-=this.dx),n&jn?this.vec.y+=this.dy:n&Mn&&(this.vec.y-=this.dy))}}const Bn=1,zn=2,Mn=4,jn=8;var On=Object.assign(r,{debug:!0,collide:{useBox:!0},keyDownHandler:function(t=0){switch(t){case ct:En(Cn,Mn);break;case st:En(Cn,zn);break;case ot:En(Cn,jn);break;case at:En(Cn,Bn)}},keyUpHanler:function(t=0){switch(t){case ct:Ln(Cn,Mn);break;case st:Ln(Cn,zn);break;case ot:Ln(Cn,jn);break;case at:Ln(Cn,Bn)}},dx:8,dy:8,bodySize:25,blockSize:40});On.tilemap.initHandler=function(t=0,n=null,e=null){let r=function(t=null,n=null){let e=Nt(t);return L(e.x+Ft(t.gridmap)*(n.colIndex+.5),e.y+Xt(t.gridmap)*(n.rowIndex+.5))}(n,e);switch(t){case 0:break;case 9:!function(t=0,n=0){A(Vn=(new l).id,t,n),function(t=0,n=null,e=0){let r=new yt(t,n,e);p(gt,r)}(Vn,J(Vn,0,0,M(0,0,On.bodySize,On.bodySize))),Cn=Hn(Vn),function(t=null,n=0){t.state!=k&&(p(m,t,t.id),t.state=k,t.onStart(),t.onUpdate(n))}(function(t=0,n=0,e=0,r=0){return 0==e&&0==r?null:new Pn(t,n,e,r)}(Vn,0,On.dx,On.dy))}(r.x,r.y);break;default:!function(t=0,n=0,e=0,r=0){let u=(new l).id;A(u,t,n),function(t=0,n=null,e=0){let r=new yt(t,n,e);p(wt,r)}(u,J(u,0,0,M(0,0,e,r)))}(r.x,r.y,On.blockSize*t,On.blockSize*t)}};var Vn=0,Cn=null;class Dn{onStart(){}onUpdate(t=0){}}console.log(On),function(t,n=null){kn(t),Wt(n)}(On,new Dn)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,