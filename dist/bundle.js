!function(t){var n={};function e(r){if(n[r])return n[r].exports;var l=n[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)e.d(r,l,function(n){return t[n]}.bind(null,l));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={debug:!0,screen:{width:400,height:400},fps:60,camera:{x:0,y:0},stage:{width:1800,height:1800},tilemap:{data:[1,1,1,1,2,1,1,1,1,1,1,9,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,4,0,1,1,1,0,1,0,1,0,0,0,3,1,1,1,1,1,2,1,1,1,1],columns:10,gridWidth:40,gridHeight:40},dx:2,dy:2,jumpDy:5,fallDy:1.4,maxFallDy:5}},function(t,n,e){"use strict";e.r(n);var r=e(0);class l{constructor(){this.id=u()}}var i=1;function u(){return i++}class c{constructor(t=0){this.entityId=t,this.id=t}}class o{constructor(t=0,n=0){this.id=u(),this.entityId=t,this.priority=n}}class s{constructor(t=0){this.id=u(),this.priority=t}onStart(){}onUpdate(t=0){}onEnd(){}}class a{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class d{constructor(){this.head=new a,this.tail=new a,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function f(){return new d}function h(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let r=t._map.get(n);return r?r.data:(e&&console.error("can't find keyId: ",n),null)}function p(t=null,n=null){return x(t,n,t.tail)}function y(t=null,n=null){let e=n&&n.priority?n.priority:0,r=t.head.next;for(;r!=t.tail&&!(e>r.data.priority);)r=r.next;return x(t,n,r)}function x(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let r=e.prep,l=new a(n,r,e);return r.next=l,e.prep=l,t._map.set(n.id,l),t._size++,l}function g(t=null,n=0){t&&0!=n?t._lock?t._delList.push(n):v(t,n):console.error("error param: ",t,n)}function v(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let r=e.prep,l=e.next;r.next=l,l.prep=r,t._size--}function w(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)v(t,t._delList.pop());t._lock=!1}var m=f();const k=1;function b(t=null,n=0){t.state!=k&&(p(m,t,t.id),t.state=k,t.onStart(),t.onUpdate(n))}const _=2;class S extends o{constructor(t=0,n=0){super(t,n),this.state=0}isEnd(){return!1}onStop(){this.onEnd()}}function I(t=null,n=0){t.onUpdate(n)}function U(t=null){t.state=_,t.onEnd()}class H extends s{constructor(){super(999)}onUpdate(t=0){w(m,n=>{I(n,t),n.isEnd()&&U(n)})}}var E=null;class P{constructor(t=0,n=0){this.x=t,this.y=n}}function D(t=0,n=0){return new P(t,n)}class j{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function z(t=0,n=0){return new j(t,n)}class L{constructor(t=null,n=0,e=0,r=null){this.offset=t,this.width=n,this.height=e,this.center=r}}function M(t=0,n=0,e=0,r=0){if(0==e||0==r)return null;let l=z(t,n);return new L(l,e,r,D())}function O(t=null){return t.width}function C(t=null){return t.height}function B(t=null){return.5*t.width}function R(t=null){return.5*t.height}class V extends c{constructor(t=0,n=0,e=0){super(t),this.pos=D(n,e),this.vec=z()}}var W=f();function T(t=0){let n=h(W,t);return n||function(t=0){let n=new V(t);return p(W,n),n}(t)}function A(t=0,n=0,e=0){let r=T(t).pos;return r.x=n,r.y=e,r}function F(t=0){return T(t).pos}function X(t=null,n=0){t.y=n}function Y(t=0){return T(t).vec}var G=f();class q{constructor(t=0,n=0,e=0,r=null){this.entityId=t,this.unitPos=null,this.unitVec=null,this.offset=z(n,e),this.rect=r}}function J(t=0,n=0,e=0,r=null){if(!r)return null;let l=new q(t,n,e,r);return l.unitPos=F(t),l.unitVec=Y(t),l}function K(t=null){return D(t.unitPos.x+t.offset.x,t.unitPos.y+t.offset.y)}function N(t=null){let n=K(t);return D(n.x-B(t.rect),n.y-R(t.rect))}function Q(t=null){let n=K(t);return D(n.x+B(t.rect),n.y+R(t.rect))}new Map;f();var Z=f();function $(t=0){return t>=0?t:-t}function tt(t=0,n=0){return t>n?t:n}function nt(t=0,n=0){return t<n?t:n}function et(t=null,n=null){let e=K(t),r=K(n);return!($(e.x-r.x)>B(t.rect)+B(n.rect))&&!($(e.y-r.y)>R(t.rect)+R(n.rect))}function rt(t=null,n=null){let e=K(t),r=D(e.x+t.unitVec.x,e.y+t.unitVec.y),l=K(n),i=D(l.x+n.unitVec.x,l.y+n.unitVec.y);return!($(r.x-i.x)>B(t.rect)+B(n.rect))&&!($(r.y-i.y)>R(t.rect)+R(n.rect))}class lt extends l{constructor(){super(),this.pos=null,this.rect=null}}function it(t=0,n=0,e=0,r=0){let l=new lt;return l.pos=A(l.id,t,n),l.rect=J(l.id,0,0,M(0,0,e,r)),l}function ut(t=null,n=null){return et(t.rect,n)}function ct(t=null,n=null){return function(t=null,n=null){return D(t.x-n.x,t.y-n.y)}(n,N(t.rect))}const ot=87,st=65,at=83,dt=68;var ft={ctx:null,canvas:null,fps:0,tick:0};function ht(){return ft}var pt=ht();Math.PI;class yt extends l{constructor(t=0,n=null,e=0){super(),this.entityId=t,this.rect=n,this.tag=e}}var xt=f();function gt(){return xt}var vt=f();function wt(){return vt}class mt extends s{onUpdate(t=0){!function(){let t=pt.canvas;pt.ctx.clearRect(0,0,t.width,t.height)}(),w(Z,t=>{let n=F(t.entityId);UpdateRectPosByUnit(t.displayArea,n.x,n.y),function(t=null){let n=vn(),e=t.displayArea;if(!ut(n,e))return;let r=ct(n,GetRectStartPos(e)),l=t.spriteFrame.textureArea;!function(t,n=0,e=0,r=0,l=0,i=0,u=0,c=0,o=0){pt.ctx.drawImage(t,n,e,r,l,i,u,c,o)}(t.spriteFrame.bitmapData,l.x,l.y,l.width,l.height,r.x,r.y,O(e),C(e))}(t)})}}var kt=null;class bt extends s{onUpdate(t=0){w(wt(),t=>{St(t.rect)}),w(gt(),t=>{St(t.rect)})}}var _t=null;function St(t=null){let n=vn();if(!ut(n,t))return;let e=ct(n,N(t));!function(t=0,n=0,e=0,r=0){pt.ctx.strokeRect(t,n,e,r)}(e.x,e.y,O(t.rect),C(t.rect))}class It extends s{constructor(){super(100)}onUpdate(t=0){w(G,t=>{0;let n=t.vec;if(0==n.x&&0==n.y)return;let e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var Ut=null;var Ht,Et=ht();var Pt=!1;var Dt=null,jt=(new Date).getTime();var zt=new Map;var Lt=f(),Mt=f();function Ot(t=!1){y(Lt,(E||(E=new H),E)),y(Lt,(Ut||(Ut=new It),Ut)),p(Mt,(kt||(kt=new mt),kt)),t&&p(Mt,(_t||(_t=new bt),_t))}var Ct=16,Bt=41,Rt=0,Vt=0;function Wt(t){w(Lt,t=>{t.onStart()}),w(Mt,t=>{t.onStart()}),t.onStart(),function(t=null){Pt=!1,Ht=t,setInterval(()=>{Dt=(new Date).getTime(),Pt||Ht(Dt-jt),jt=(new Date).getTime()},Et.tick)}(n=>{(Rt+=n)>=Ct&&(Rt-=Ct,t.onUpdate(n),w(Lt,t=>{t.onUpdate(n)})),(Vt+=n)>=Bt&&(Vt-=Bt,w(Mt,t=>{t.onUpdate(n)}))})}function Tt(t=null){t&&y(Lt,t)}class At{constructor(t=0,n=0,e=null){this.rowIndex=t,this.colIndex=n,this.data=e}}class Ft{constructor(t=0,n=0,e=0,r=0,l=null){this.rows=t,this.columns=n,this.gridWidth=e,this.gridHeight=r,this.grids=l}}function Xt(t=null){return t.gridWidth}function Yt(t=null){return t.gridHeight}function Gt(t=null){return t.columns*t.gridWidth}function qt(t=null){return t.rows*t.gridHeight}class Jt{constructor(t=null,n=0,e=0){this.gridmap=t,this.pos=D(n,e)}}function Kt(t=0,n=0,e=0,r=0,l=0,i=0){let u=function(t=0,n=0,e=0,r=0){let l=[];for(let e=0;e<t;e++)for(let t=0;t<n;t++){let n=new At(e,t);l.push(n)}return new Ft(t,n,e,r,l)}(t,n,e,r);return new Jt(u,l,i)}function Nt(t=null){return D(t.pos.x-.5*Gt(t.gridmap),t.pos.y-.5*qt(t.gridmap))}class Qt{constructor(t=0,n=null,e=null){this.id=t,this.team1=n,this.team2=e}}var Zt=new Map;function $t(t=0){let n=Zt.get(t);return n||(n=f(),Zt.set(t,n)),n}function tn(t=0,n=null,e=0,r=0){let l=new yt(t,n,e);return p($t(r),l),l}var nn=f();class en extends s{constructor(t=null){super(800),this.callback=t}onUpdate(t=0){w(nn,t=>{null==t.team2?function(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail;){let r=e.next;for(;r!=t.tail;)n(e.data,r.data),r=r.next;e=e.next}t._lock=!1,t._delList.forEach(n=>{g(t,n)})}(t.team1,(t,n)=>{rt(t.rect,n.rect)&&this.callback(t,n)}):w(t.team1,n=>{w(t.team2,t=>{rt(n.rect,t.rect)&&this.callback(n,t)})})})}}var rn=null;f();f();f();class ln extends s{constructor(t=null){super(900),this.callback=t}onUpdate(t=0){w(gt(),t=>{(function(t=null){if(0==(dn=Y(t.entityId)).x&&0==dn.y)return!1;return fn=B(t.rect.rect),hn=R(t.rect.rect),cn=N(t.rect),on=Q(t.rect),pn=K(t.rect),!0})(t)&&w(wt(),n=>{!function(t=null,n=null){if(!rt(t.rect,n.rect))return;sn=N(n.rect),an=Q(n.rect),function(){if(0==dn.x)return!1;let t=tt(cn.y,sn.y);if(nt(on.y,an.y)<=t)return!1;let n=dn.x>0?sn.x-fn:an.x+fn;return function(t=null,n=0){t.x=n}(dn,n-pn.x),!0}()||function(){if(0==dn.y)return!1;let t=tt(cn.x,sn.x);if(nt(on.x,an.x)<=t)return!1;let n=dn.y>0?sn.y-hn:an.y+hn;X(dn,n-pn.y)}()}(t,n)})})}}var un=null;var cn=null,on=null,sn=null,an=null,dn=null,fn=0,hn=0,pn=null;function yn(t=null){t.useBox&&Tt(function(t=null){return un||(un=new ln(t)),un}()),t.group&&t.group.length>0&&(t.group.forEach(t=>{!function(t=0,n=0){if(0==t||0==n)return null;let e=$t(t),r=t==n?null:$t(n),l=new Qt(t|n,e,r);p(nn,l)}(t.team1,t.team2)}),Tt(function(t=null){return rn||(rn=new en(t)),rn}(t.callback)))}function xn(t=null){!function(t=0,n=0,e=10){let r=document.getElementById("canvas");r.width=t,r.height=n,ft.canvas=r,ft.ctx=r.getContext("2d"),ft.ctx.strokeStyle="#0000ff",ft.fps=e,ft.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;zt.get(e)||(zt.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;zt.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){Et.canvas.addEventListener("mousedown",n=>{let e=canvas.getBoundingClientRect(),r=n.clientX-e.left*(canvas.width/e.width),l=n.clientY-e.top*(canvas.height/e.height);t(r,l)}),Et.canvas.addEventListener("mouseup",t=>{let e=canvas.getBoundingClientRect(),r=t.clientX-e.left*(canvas.width/e.width),l=t.clientY-e.top*(canvas.height/e.height);n(r,l)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,r=t.height?t.height:n.height;gn=it(t.x,t.y,e,r)}(t.camera,t.screen),Ot(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,r=parseInt(t.data.length/e);if(r*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let l=Kt(r,e,t.gridWidth,t.gridHeight,t.x,t.y);return n&&function(t=null,n=null){t.grids.forEach(t=>{n(t)})}(l.gridmap,r=>{let i=t.data[r.rowIndex*e+r.colIndex];n(i,l,r)}),l})(t,t.initHandler)}(t.tilemap),t.collide&&yn(t.collide)}var gn=null;function vn(){return gn}class wn extends S{constructor(t=0,n=0,e=0,r=0){super(t,n),this.dx=e,this.dy=r}onStart(){this.vec=Y(this.entityId),function(t=0){h(G,t)||p(G,T(t))}(this.entityId)}onUpdate(t=0){this.vec.x+=this.dx,this.vec.y+=this.dy}onEnd(){!function(t=0){g(G,t)}(this.entityId)}}class mn extends c{constructor(t=0){super(t),this.val=0}}var kn=f();function bn(t=0){let n=h(kn,t);return n||function(t=0){let n=new mn(t);return p(kn,n),n}(t)}function _n(t=null,n=0){t.val=t.val|n}function Sn(t=null,n=0){t.val=t.val^n}class In extends wn{constructor(t=0,n=0,e=0,r=0){super(t,n,e,r)}onStart(){super.onStart(),this.cmd=bn(this.entityId)}onUpdate(t=0){let n=this.cmd.val;0!=(15&n)&&(n&Hn?this.vec.x+=this.dx:n&En&&(this.vec.x-=this.dx),n&Dn?this.vec.y+=this.dy:n&Pn&&(this.vec.y-=this.dy))}}function Un(t=0,n=0,e=0,r=0){return 0==e&&0==r?null:new In(t,n,e,r)}const Hn=1,En=2,Pn=4,Dn=8;var jn=Object.assign(r,{keyDownHandler:function(t=0){switch(t){case ot:_n(Ln,Pn);break;case st:_n(Ln,En);break;case at:_n(Ln,Dn);break;case dt:_n(Ln,Hn)}},keyUpHanler:function(t=0){switch(t){case ot:Sn(Ln,Pn);break;case st:Sn(Ln,En);break;case at:Sn(Ln,Dn);break;case dt:Sn(Ln,Hn)}},bodySize:25,blockSize:20,collide:{useBox:!0,group:[{team1:1,team2:2}],callback:function(t=null,n=null){Mn++}}});jn.tilemap.initHandler=function(t=0,n=null,e=null){let r=function(t=null,n=null){let e=Nt(t);return D(e.x+Xt(t.gridmap)*(n.colIndex+.5),e.y+Yt(t.gridmap)*(n.rowIndex+.5))}(n,e);switch(t){case 0:break;case 9:!function(t=0,n=0){A(zn=(new l).id,t,n);let e=J(zn,0,0,M(0,0,jn.bodySize,jn.bodySize));(function(t=0,n=null,e=0){let r=new yt(t,n,e);p(xt,r)})(zn,e),tn(zn,e,0,1),Ln=bn(zn),b(Un(zn,0,jn.dx,jn.dy))}(r.x,r.y);break;default:!function(t=0,n=0,e=0,r=0){let i=(new l).id;A(i,t,n);let u=J(i,0,0,M(0,0,e,r));(function(t=0,n=null,e=0){let r=new yt(t,n,e);p(vt,r)})(i,u),tn(i,u,0,2)}(r.x,r.y,jn.blockSize*t,jn.blockSize*t)}};var zn=0,Ln=null;var Mn=0;class On{onStart(){}onUpdate(t=0){console.log(Mn),Mn=0}}console.log(jn),function(t,n=null){xn(t),Wt(n)}(jn,new On)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,