!function(t){var n={};function e(r){if(n[r])return n[r].exports;var l=n[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)e.d(r,l,function(n){return t[n]}.bind(null,l));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={screen:{width:800,height:800},fps:60,camera:{x:400,y:400},stage:{width:1800,height:1800}}},function(t,n,e){"use strict";e.r(n);var r=e(0);class l{constructor(){this.id=i()}}var u=1;function i(){return u++}class o{constructor(t=0){this.entityId=t,this.id=t}}class s{constructor(t=0){this.priority=t,this.id=i()}onStart(){}onUpdate(t=0){}onEnd(){}}const c=2;function a(t=null,n=0){t.onUpdate(n)}function d(t=null){t.state=c,t.onEnd()}class f{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class h{constructor(){this.head=new f,this.tail=new f,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function p(){return new h}function x(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let r=t._map.get(n);return r?r.data:(e&&console.error("can't find keyId: ",n),null)}function y(t=null,n=null){return g(t,n,t.tail)}function g(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let r=e.prep,l=new f(n,r,e);return r.next=l,e.prep=l,t._map.set(n.id,l),t._size++,l}function w(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let r=e.prep,l=e.next;r.next=l,l.prep=r,t._size--}function m(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)w(t,t._delList.pop());t._lock=!1}var v=p();class k extends s{onUpdate(t=0){m(v,n=>{a(n,t),n.isEnd()&&d(n)})}}var _=null;p();var b=p();class H{constructor(t=0,n=0){this.x=t,this.y=n}}function I(t=0,n=0){return new H(t,n)}function U(t=null,n=null){return I(t.x-n.x,t.y-n.y)}class S{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function M(t=0,n=0){return new S(t,n)}class P extends o{constructor(t=0,n=0,e=0){super(t),this.pos=I(n,e),this.vec=M()}}var E=p();function L(t=0){let n=x(E,t);return n||function(t=0){let n=new P(t);return y(E,n),n}(t)}function T(){return E}function j(t=0,n=0,e=0){let r=L(t).pos;return r.x=n,r.y=e,r}class O{constructor(t=null,n=0,e=0,r=null){this.offset=t,this.width=n,this.height=e,this.center=r}}function R(t=0,n=0,e=0,r=0){let l=M(t,n);return new O(l,e,r,I())}function C(t=null,n=0,e=0){t.center.x=n+t.offset.x,t.center.y=e+t.offset.y}function D(t=null){return I(t.center.x-G(t),t.center.y-W(t))}function G(t=null){return.5*t.width}function W(t=null){return.5*t.height}class z extends l{constructor(){super(),this.pos=null,this.rect=null}}function A(t=0,n=0,e=0,r=0){let l=new z;return l.pos=j(l.id,t,n),l.rect=R(0,0,e,r),C(l.rect,t,n),l}function F(t=null,n=null){return IsRectsCross(t.rect,n)}var B={ctx:null,canvas:null,fps:0,tick:0};function N(){return B}var q=N();Math.PI;function J(t,n=0,e=0,r=0,l=0,u=0,i=0,o=0,s=0){q.ctx.drawImage(t,n,e,r,l,u,i,o,s)}function K(t=0,n=0,e=0,r=0){q.ctx.strokeRect(t,n,e,r)}class Q extends s{onUpdate(t=0){m(b,t=>{let n=function(t=0){return L(t).pos}(t.entityId);C(t.displayArea,n.x,n.y),function(t=null){let n=yt(),e=t.displayArea;if(!F(n,e))return;let r=U(D(e),D(n.rect)),l=t.spriteFrame.textureArea;J(t.spriteFrame.bitmapData,l.x,l.y,l.width,l.height,r.x,r.y,GetRectWidth(e),GetRectHeight(e))}(t)})}}var V=null;class X extends s{onUpdate(t=0){m(GetRectList(),t=>{!function(t=null){let n=yt();if(!F(n,t))return;let e=U(D(t),D(n.rect));K(e.x,e.y,GetRectWidth(t),GetRectHeight(t))}(t.rect)})}}var Y=null;class Z extends s{onUpdate(t=0){m(T(),t=>{let n=t.vec,e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var $=null;var tt,nt=N();var et=!1;var rt=null,lt=(new Date).getTime();var ut=new Map;$||($=new Z);var it=null,ot=null;function st(t=!1){y(it=p(),(_||(_=new k),_)),y(ot=p(),(V||(V=new Q),V)),t&&y(ot,(Y||(Y=new X),Y))}var ct,at=16,dt=41,ft=0;function ht(t){m(it,t=>{t.onStart()}),m(ot,t=>{t.onStart()}),t.onStart(),function(t=null){et=!1,tt=t,setInterval(()=>{rt=(new Date).getTime(),et||tt(rt-lt),lt=(new Date).getTime()},nt.tick)}(n=>{(ct+=n)>=at&&(ct-=at,t.onUpdate(n),m(it,t=>{t.onUpdate(n)})),(ft+=n)>=dt&&(ft-=dt,m(ot,t=>{t.onUpdate(n)}))})}new Map;function pt(t=null){!function(t=0,n=0,e=10){let r=document.getElementById("canvas");r.width=t,r.height=n,B.canvas=r,B.ctx=r.getContext("2d"),B.ctx.strokeStyle="#0000ff",B.fps=e,B.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;ut.get(e)||(ut.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;ut.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){nt.canvas.addEventListener("mousedown",n=>{t(n.x,n.y)}),nt.canvas.addEventListener("mouseup",t=>{n(t.x,t.y)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,r=t.height?t.height:n.height;xt=A(t.x,t.y,e,r)}(t.camera,t.screen),st(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,r=parseInt(t.data.length/e);if(r*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let l=NewTileMap(r,e,t.gridWidth,t.gridHeight,t.x,t.y,n);return n&&IteratorGridmap(l.gridmap,r=>{let l=t.data[r.rowIndex*e+r.colIndex];n(l,r)}),l})(t,t.initHandler)}(t.tilemap),t.collide}var xt=null;function yt(){return xt}class gt{constructor(t=0,n=0,e=0){this.a=t,this.b=n,this.c=e}}class wt{constructor(t=null,n=null){this.start=t,this.vec=n,this.end=I(t.x+n.x,t.y+n.y),this.formula=null}}function mt(t=0,n=0,e=0,r=0){return vt(t,n,function(t=0,n=0,e=0,r=0){return new M(e-t,r-n)}(t,n,e,r))}function vt(t=0,n=0,e=null){if(0==function(t=null){return t.distance}(e))return null;let r=new wt(I(t,n),e),l=function(t=null){let n=t.end.y,e=t.start.y,r=t.end.x,l=t.start.x;return new gt(n-e,l-r,r*e-l*n)}(r);return r.formula=l,r}function kt(t=null,n=null){return function(t=null,n=null){let e=t.a,r=t.b,l=t.c,u=n.a,i=n.b,o=n.c,s=e*i-u*r;return 0==s?null:I((o*r-l*i)/s,(l*u-o*e)/s)}(t.formula,n.formula)}function _t(t=0,n=0,e=0,r=0){!function(t=0,n=0,e=0,r=0){let l=q.ctx;l.beginPath(),l.moveTo(t,n),l.lineTo(e,r),l.stroke()}(t,n,e,r)}function bt(t=0,n=0,e=0){!function(t=0,n=0,e=0){let r=q.ctx;r.beginPath(),r.arc(t,n,e,0,2*Math.PI),r.stroke()}(t,n,e)}var Ht,It,Ut,St={debug:!1,fps:r.fps,screen:{width:r.screen.width,height:r.screen.height},stage:{width:r.stage.width,height:r.stage.height},camera:{x:r.camera.x,y:r.camera.y},mousedownHandler:function(t=0,n=0){Ht=I(t,n)},mouseupHandler:function(t=0,n=0){if(!Ht)return;It?Ut=mt(Ht.x,Ht.y,t,n):It=mt(Ht.x,Ht.y,t,n);if(_t(Ht.x,Ht.y,t,n),It&&Ut){let t=kt(It,Ut);console.log(t),bt(t.x,t.y,10)}Ht=null}};class Mt{onStart(){}onUpdate(t=0){}}console.log(St),function(t,n=null){pt(t),ht(n)}(St,new Mt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,