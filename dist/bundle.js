!function(t){var n={};function e(r){if(n[r])return n[r].exports;var l=n[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)e.d(r,l,function(n){return t[n]}.bind(null,l));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={debug:!0,screen:{width:800,height:800},fps:60,camera:{x:0,y:0},stage:{width:1800,height:1800},tilemap:{data:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,9,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],columns:20,gridWidth:40,gridHeight:40},bodySize:25,blockSize:20,dx:2,dy:2,jumpDy:5,fallDy:.2,maxFallDy:5}},function(t,n,e){"use strict";e.r(n);var r=e(0);class l{constructor(){this.id=u()}}var i=1;function u(){return i++}class c{constructor(t=0){this.entityId=t,this.id=t}}class o{constructor(t=0,n=0){this.id=u(),this.entityId=t,this.priority=n}}class s{constructor(t=0){this.id=u(),this.priority=t}onStart(){}onUpdate(t=0){}onEnd(){}}class a{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class d{constructor(){this.head=new a,this.tail=new a,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function h(){return new d}function f(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let r=t._map.get(n);return r?r.data:(e&&console.error("can't find keyId: ",n),null)}function p(t=null,n=null){return x(t,n,t.tail)}function y(t=null,n=null){let e=n&&n.priority?n.priority:0,r=t.head.next;for(;r!=t.tail&&!(e>r.data.priority);)r=r.next;return x(t,n,r)}function x(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let r=e.prep,l=new a(n,r,e);return r.next=l,e.prep=l,t._map.set(n.id,l),t._size++,l}function g(t=null,n=0){t&&0!=n?t._lock?t._delList.push(n):v(t,n):console.error("error param: ",t,n)}function v(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let r=e.prep,l=e.next;r.next=l,l.prep=r,t._size--}function w(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)v(t,t._delList.pop());t._lock=!1}var m=h();const k=1,b=2;function _(t=null,n=0){t.state!=k&&(p(m,t,t.id),t.state=k,t.onStart(),t.onUpdate(n))}function I(t=null){t.state==k&&(g(m,t.id),t.state=b,t.onEnd())}const S=2;class U extends o{constructor(t=0,n=0){super(t,n),this.state=0}isEnd(){return!1}onStop(){this.onEnd()}}function D(t=null,n=0){t.onUpdate(n)}function H(t=null){t.state=S,t.onEnd()}class E extends s{constructor(){super(999)}onUpdate(t=0){w(m,n=>{D(n,t),n.isEnd()&&H(n)})}}var j=null;class P{constructor(t=0,n=0){this.x=t,this.y=n}}function A(t=0,n=0){return new P(t,n)}class L{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function M(t=0,n=0){return new L(t,n)}class O{constructor(t=null,n=0,e=0,r=null){this.offset=t,this.width=n,this.height=e,this.center=r}}function z(t=0,n=0,e=0,r=0){if(0==e||0==r)return null;let l=M(t,n);return new O(l,e,r,A())}function C(t=null){return t.width}function B(t=null){return t.height}function R(t=null){return.5*t.width}function V(t=null){return.5*t.height}class W extends c{constructor(t=0,n=0,e=0){super(t),this.pos=A(n,e),this.vec=M()}}var T=h();function F(t=0){let n=f(T,t);return n||function(t=0){let n=new W(t);return p(T,n),n}(t)}function X(t=0){return F(t).pos}function Y(t=0,n=0,e=0){!function(t=null,n=0,e=0){t.x=n,t.y=e}(X(t),n,e)}function G(t=0){return F(t).vec}function q(t=0,n=0){let e=G(t);J(e,e.x,n)}function J(t=null,n=0,e=0){t.x=n,t.y=e}var K=h();class N{constructor(t=0,n=0,e=0,r=null){this.entityId=t,this.unitPos=null,this.unitVec=null,this.offset=M(n,e),this.rect=r}}function Q(t=0,n=0,e=0,r=null){if(!r)return null;let l=new N(t,n,e,r);return l.unitPos=X(t),l.unitVec=G(t),l}function Z(t=null){return A(t.unitPos.x+t.offset.x,t.unitPos.y+t.offset.y)}function $(t=null){let n=Z(t);return A(n.x-R(t.rect),n.y-V(t.rect))}function tt(t=null){let n=Z(t);return A(n.x+R(t.rect),n.y+V(t.rect))}new Map;h();var nt=h();function et(t=0){return t>=0?t:-t}function rt(t=0,n=0){return t>n?t:n}function lt(t=0,n=0){return t<n?t:n}function it(t=null,n=null){let e=Z(t),r=Z(n);return!(et(e.x-r.x)>R(t.rect)+R(n.rect))&&!(et(e.y-r.y)>V(t.rect)+V(n.rect))}function ut(t=null,n=null){let e=Z(t),r=A(e.x+t.unitVec.x,e.y+t.unitVec.y),l=Z(n),i=A(l.x+n.unitVec.x,l.y+n.unitVec.y);return!(et(r.x-i.x)>R(t.rect)+R(n.rect))&&!(et(r.y-i.y)>V(t.rect)+V(n.rect))}class ct extends l{constructor(){super(),this.pos=null,this.rect=null}}function ot(t=0,n=0,e=0,r=0){let l=new ct;return l.pos=Y(l.id,t,n),l.rect=Q(l.id,0,0,z(0,0,e,r)),l}function st(t=null,n=null){return it(t.rect,n)}function at(t=null,n=null){return function(t=null,n=null){return A(t.x-n.x,t.y-n.y)}(n,$(t.rect))}const dt=32,ht=65,ft=68;var pt={ctx:null,canvas:null,fps:0,tick:0};function yt(){return pt}var xt=yt();Math.PI;class gt extends l{constructor(t=0,n=null,e=0){super(),this.entityId=t,this.rect=n,this.tag=e}}var vt=h();function wt(){return vt}var mt=h();function kt(){return mt}class bt extends s{onUpdate(t=0){!function(){let t=xt.canvas;xt.ctx.clearRect(0,0,t.width,t.height)}(),w(nt,t=>{let n=X(t.entityId);UpdateRectPosByUnit(t.displayArea,n.x,n.y),function(t=null){let n=kn(),e=t.displayArea;if(!st(n,e))return;let r=at(n,GetRectStartPos(e)),l=t.spriteFrame.textureArea;!function(t,n=0,e=0,r=0,l=0,i=0,u=0,c=0,o=0){xt.ctx.drawImage(t,n,e,r,l,i,u,c,o)}(t.spriteFrame.bitmapData,l.x,l.y,l.width,l.height,r.x,r.y,C(e),B(e))}(t)})}}var _t=null;class It extends s{onUpdate(t=0){w(kt(),t=>{Ut(t.rect)}),w(wt(),t=>{Ut(t.rect)})}}var St=null;function Ut(t=null){let n=kn();if(!st(n,t))return;let e=at(n,$(t));!function(t=0,n=0,e=0,r=0){xt.ctx.strokeRect(t,n,e,r)}(e.x,e.y,C(t.rect),B(t.rect))}class Dt extends s{constructor(){super(100)}onUpdate(t=0){w(K,t=>{let n=t.vec;if(0==n.x&&0==n.y)return;let e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var Ht=null;var Et,jt=yt();var Pt=!1;var At=null,Lt=(new Date).getTime();var Mt=new Map;var Ot=h(),zt=h();function Ct(t=!1){y(Ot,(j||(j=new E),j)),y(Ot,(Ht||(Ht=new Dt),Ht)),p(zt,(_t||(_t=new bt),_t)),t&&p(zt,(St||(St=new It),St))}var Bt=16,Rt=41,Vt=0,Wt=0;function Tt(t){w(Ot,t=>{t.onStart()}),w(zt,t=>{t.onStart()}),t.onStart(),function(t=null){Pt=!1,Et=t,setInterval(()=>{At=(new Date).getTime(),Pt||Et(At-Lt),Lt=(new Date).getTime()},jt.tick)}(n=>{(Vt+=n)>=Bt&&(Vt-=Bt,t.onUpdate(n),w(Ot,t=>{t.onUpdate(n)})),(Wt+=n)>=Rt&&(Wt-=Rt,w(zt,t=>{t.onUpdate(n)}))})}function Ft(t=null){t&&y(Ot,t)}class Xt{constructor(t=0,n=0,e=null){this.rowIndex=t,this.colIndex=n,this.data=e}}class Yt{constructor(t=0,n=0,e=0,r=0,l=null){this.rows=t,this.columns=n,this.gridWidth=e,this.gridHeight=r,this.grids=l}}function Gt(t=null){return t.gridWidth}function qt(t=null){return t.gridHeight}function Jt(t=null){return t.columns*t.gridWidth}function Kt(t=null){return t.rows*t.gridHeight}class Nt{constructor(t=null,n=0,e=0){this.gridmap=t,this.pos=A(n,e)}}function Qt(t=0,n=0,e=0,r=0,l=0,i=0){let u=function(t=0,n=0,e=0,r=0){let l=[];for(let e=0;e<t;e++)for(let t=0;t<n;t++){let n=new Xt(e,t);l.push(n)}return new Yt(t,n,e,r,l)}(t,n,e,r);return new Nt(u,l,i)}function Zt(t=null){return A(t.pos.x-.5*Jt(t.gridmap),t.pos.y-.5*Kt(t.gridmap))}class $t{constructor(t=0,n=null,e=null){this.id=t,this.team1=n,this.team2=e}}var tn=new Map;function nn(t=0){let n=tn.get(t);return n||(n=h(),tn.set(t,n)),n}function en(t=0,n=null,e=0,r=0){let l=new gt(t,n,e);return p(nn(r),l),l}var rn=h();class ln extends s{constructor(t=null){super(800),this.callback=t}onUpdate(t=0){w(rn,t=>{null==t.team2?function(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail;){let r=e.next;for(;r!=t.tail;)n(e.data,r.data),r=r.next;e=e.next}t._lock=!1,t._delList.forEach(n=>{g(t,n)})}(t.team1,(t,n)=>{ut(t.rect,n.rect)&&this.callback(t,n)}):w(t.team1,n=>{w(t.team2,t=>{ut(n.rect,t.rect)&&this.callback(n,t)})})})}}var un=null;h();h();h();class cn extends s{constructor(t=null){super(900),this.callback=t}onUpdate(t=0){w(wt(),t=>{(function(t=null){if(gn=t.entityId,0==(fn=G(t.entityId)).x&&0==fn.y)return!1;return pn=R(t.rect.rect),yn=V(t.rect.rect),sn=$(t.rect),an=tt(t.rect),xn=Z(t.rect),!0})(t)&&w(kt(),n=>{!function(t=null,n=null){if(!ut(t.rect,n.rect))return;dn=$(n.rect),hn=tt(n.rect),function(){if(0==fn.x)return!1;let t=rt(sn.y,dn.y);if(lt(an.y,hn.y)<=t)return!1;let n=fn.x>0?dn.x-pn:hn.x+pn;return function(t=0,n=0){let e=G(t);J(e,n,e.y)}(gn,n-xn.x),!0}()||function(){if(0==fn.y)return!1;let t=rt(sn.x,dn.x);if(lt(an.x,hn.x)<=t)return!1;let n=fn.y>0?dn.y-yn:hn.y+yn;q(gn,n-xn.y)}()}(t,n)})})}}var on=null;var sn=null,an=null,dn=null,hn=null,fn=null,pn=0,yn=0,xn=null,gn=0;function vn(t=null){t.useBox&&Ft(function(t=null){return on||(on=new cn(t)),on}()),t.group&&t.group.length>0&&(t.group.forEach(t=>{!function(t=0,n=0){if(0==t||0==n)return null;let e=nn(t),r=t==n?null:nn(n),l=new $t(t|n,e,r);p(rn,l)}(t.team1,t.team2)}),Ft(function(t=null){return un||(un=new ln(t)),un}(t.callback)))}function wn(t=null){!function(t=0,n=0,e=10){let r=document.getElementById("canvas");r.width=t,r.height=n,pt.canvas=r,pt.ctx=r.getContext("2d"),pt.ctx.strokeStyle="#0000ff",pt.fps=e,pt.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;Mt.get(e)||(Mt.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;Mt.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){jt.canvas.addEventListener("mousedown",n=>{let e=canvas.getBoundingClientRect(),r=n.clientX-e.left*(canvas.width/e.width),l=n.clientY-e.top*(canvas.height/e.height);t(r,l)}),jt.canvas.addEventListener("mouseup",t=>{let e=canvas.getBoundingClientRect(),r=t.clientX-e.left*(canvas.width/e.width),l=t.clientY-e.top*(canvas.height/e.height);n(r,l)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,r=t.height?t.height:n.height;mn=ot(t.x,t.y,e,r)}(t.camera,t.screen),Ct(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,r=parseInt(t.data.length/e);if(r*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let l=Qt(r,e,t.gridWidth,t.gridHeight,t.x,t.y);return n&&function(t=null,n=null){t.grids.forEach(t=>{n(t)})}(l.gridmap,r=>{let i=t.data[r.rowIndex*e+r.colIndex];n(i,l,r)}),l})(t,t.initHandler)}(t.tilemap),t.collide&&vn(t.collide)}var mn=null;function kn(){return mn}class bn extends U{constructor(t=0,n=0,e=0,r=0){super(t,n),this.dx=e,this.dy=r}onStart(){this.vec=G(this.entityId),function(t=0){f(K,t)||p(K,F(t))}(this.entityId)}onUpdate(t=0){this.vec.x+=this.dx,this.vec.y+=this.dy}onEnd(){!function(t=0){g(K,t)}(this.entityId)}}class _n extends c{constructor(t=0){super(t),this.val=0}}var In=h();function Sn(t=0){let n=f(In,t);return n||function(t=0){let n=new _n(t);return p(In,n),n}(t)}function Un(t=null,n=0){t.val=t.val|n}function Dn(t=null,n=0){t.val=t.val^n}function Hn(t=0){return(Sn(t).val&Mn)>0}class En extends bn{constructor(t=0,n=0,e=0,r=0){super(t,n,e,r)}onStart(){super.onStart(),this.cmd=Sn(this.entityId)}onUpdate(t=0){let n=this.cmd.val;0!=(15&n)&&(n&jn?this.vec.x+=this.dx:n&Pn&&(this.vec.x-=this.dx),n&Ln?this.vec.y+=this.dy:n&An&&(this.vec.y-=this.dy))}}const jn=1,Pn=2,An=4,Ln=8,Mn=16;class On extends bn{constructor(t=0,n=0,e=0,r=0){super(t,n,0,e),this.maxDy=r}onStart(){super.onStart(),this._count=this.vec.y}onUpdate(t=0){this._count+=this.dy,this._count>this.maxDy&&(this._count=this.maxDy),this.vec.y+=this._count}onEnd(){this._count=0}}class zn extends c{constructor(t=0){super(t),this.val=0}}var Cn=h();function Bn(t=0){let n=f(Cn,t);return n||function(t=0){let n=new zn(t);return p(Cn,n),n}(t)}const Rn=2,Vn=3;function Wn(t=0){Fn(t,Rn)}function Tn(t=0){Fn(t,Vn)}function Fn(t=0,n=0){Bn(t).val=n}function Xn(t=0){return Gn(t,Rn)}function Yn(t=0){return Gn(t,Vn)}function Gn(t=0,n=0){return Bn(t).val==n}var qn=0;class Jn extends U{constructor(t=0,n=0,e=0,r=0,l=0,i=0){super(t,n),this.jumpDy=r,this.fallAct=function(t=0,n=0,e=0,r=0){return e<=0||r<e?null:new On(t,n,e,r)}(t,n+1,l,i),this.moveAct=function(t=0,n=0,e=0,r=0){return 0==e&&0==r?null:new En(t,n,e,r)}(t,n+1,e,0)}onStart(){Wn(this.entityId),_(this.moveAct)}onUpdate(t=0){do{if(qn&&Yn(this.entityId)){Wn(this.entityId),I(this.fallAct);break}if(Xn(this.entityId)){if(!qn){Tn(this.entityId),_(this.fallAct);break}if(Hn(this.entityId)){q(this.entityId,-this.jumpDy),Tn(this.entityId),_(this.fallAct);break}}}while(0);qn=0}}var Kn=null;var Nn=Object.assign(r,{keyDownHandler:function(t=0){switch(t){case ht:Un(Zn,Pn);break;case ft:Un(Zn,jn);break;case dt:Un(Zn,Mn)}},keyUpHanler:function(t=0){switch(t){case ht:Dn(Zn,Pn);break;case ft:Dn(Zn,jn);break;case dt:Dn(Zn,Mn)}},collide:{useBox:!0,group:[{team1:1,team2:2}],callback:function(t=null,n=null){let e=Z(t.rect),r=Z(n.rect);et(e.x-r.x)>=R(t.rect.rect)+R(n.rect.rect)||(e.y<=r.y?qn=1:q(t.entityId,0))}}});Nn.tilemap.initHandler=function(t=0,n=null,e=null){let r=function(t=null,n=null){let e=Zt(t);return A(e.x+Gt(t.gridmap)*(n.colIndex+.5),e.y+qt(t.gridmap)*(n.rowIndex+.5))}(n,e);switch(t){case 0:break;case 9:!function(t=0,n=0){Y(Qn=(new l).id,t,n);let e=Q(Qn,0,0,z(0,0,Nn.bodySize,Nn.bodySize));(function(t=0,n=null,e=0){let r=new gt(t,n,e);p(vt,r)})(Qn,e),en(Qn,e,0,1),Zn=Sn(Qn),_(function(t=0,n=0,e=0,r=0,l=0){return Kn||(Kn=new Jn(t,0,n,e,r,l)),Kn}(Qn,Nn.dx,Nn.jumpDy,Nn.fallDy,Nn.maxFallDy))}(r.x,r.y);break;default:!function(t=0,n=0,e=0,r=0){let i=(new l).id;Y(i,t,n);let u=Q(i,0,0,z(0,0,e,r));(function(t=0,n=null,e=0){let r=new gt(t,n,e);p(mt,r)})(i,u),en(i,u,0,2)}(r.x,r.y,Gt(n.gridmap),qt(n.gridmap))}};var Qn=0,Zn=null;class $n{onStart(){}onUpdate(t=0){}}console.log(Nn),function(t,n=null){wn(t),Tt(n)}(Nn,new $n)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,