!function(n){var t={};function e(l){if(t[l])return t[l].exports;var r=t[l]={i:l,l:!1,exports:{}};return n[l].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=n,e.c=t,e.d=function(n,t,l){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:l})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var l=Object.create(null);if(e.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(l,r,function(t){return n[t]}.bind(null,r));return l},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=1)}([function(n){n.exports={screen:{width:400,height:400},fps:60,camera:{x:0,y:0},stage:{width:1800,height:1800},tilemap:{data:[1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1],columns:10,gridWidth:40,gridHeight:40}}},function(n,t,e){"use strict";e.r(t);var l=e(0);class r{constructor(){this.id=u()}}var i=1;function u(){return i++}class o{constructor(n=0){this.entityId=n,this.id=n}}class c{constructor(n=0){this.priority=n,this.id=u()}onStart(){}onUpdate(n=0){}onEnd(){}}const s=2;function a(n=null,t=0){n.onUpdate(t)}function d(n=null){n.state=s,n.onEnd()}class f{constructor(n=null,t=null,e=null){this.data=n,this.prep=t,this.next=e}}class h{constructor(){this.head=new f,this.tail=new f,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function p(){return new h}function g(n=null,t=0,e=!1){if(!n)return void console.error("link is null.");let l=n._map.get(t);return l?l.data:(e&&console.error("can't find keyId: ",t),null)}function x(n=null,t=null){return y(n,t,n.tail)}function y(n=null,t=null,e=null){if(!n||!t||!t.id)return console.error("error param: ",n,t,t.id),null;if(n._map.get(t.id))return console.error("error id:%d is exist",t.id),null;let l=e.prep,r=new f(t,l,e);return l.next=r,e.prep=r,n._map.set(t.id,r),n._size++,r}function w(n=null,t=0){let e=n._map.get(t);if(!e)return;n._map.delete(t);let l=e.prep,r=e.next;l.next=r,r.prep=l,n._size--}function m(n=null,t=null){if(!n||!t)return;n._lock=!0;let e=n.head.next;for(;e!=n.tail&&!t(e.data);)e=e.next;for(;n._delList.length>0;)w(n,n._delList.pop());n._lock=!1}var v=p();class _ extends c{onUpdate(n=0){m(v,t=>{a(t,n),t.isEnd()&&d(t)})}}var k=null;p();var H=p();class b{constructor(n=0,t=0){this.x=n,this.y=t}}function I(n=0,t=0){return new b(n,t)}class U{constructor(n=0,t=0){this.x=n,this.y=t,this.distance=n*n+t*t}}function S(n=0,t=0){return new U(n,t)}class E extends o{constructor(n=0,t=0,e=0){super(n),this.pos=I(t,e),this.vec=S()}}var j=p();function L(n=0){let t=g(j,n);return t||function(n=0){let t=new E(n);return x(j,t),t}(n)}function M(){return j}function O(n=0,t=0,e=0){let l=L(n).pos;return l.x=t,l.y=e,l}class C{constructor(n=null,t=0,e=0,l=null){this.offset=n,this.width=t,this.height=e,this.center=l}}function D(n=0,t=0,e=0,l=0){let r=S(n,t);return new C(r,e,l,I())}function P(n=null,t=0,e=0){n.center.x=t,n.center.y=e}function W(n=null,t=0,e=0){n.center.x=t+n.offset.x,n.center.y=e+n.offset.y}function T(n=null){return I(n.center.x-B(n),n.center.y-F(n))}function R(n=null){return I(n.center.x+B(n),n.center.y+F(n))}function z(n=null){return n.width}function A(n=null){return n.height}function B(n=null){return.5*n.width}function F(n=null){return.5*n.height}function X(n=null,t=null){return!!function(n=null,t=null){let e=T(n),l=T(t),r=R(n),i=R(t),u=e.x,o=l.x,c=u>o?u:o,s=r.x,a=i.x,d=s<a?s:a;if(d<c)return null;let f=e.y,h=l.y,p=f>h?f:h,g=r.y,x=i.y,y=g<x?g:x;return y<p?null:D(0,0,d-c,y-p)}(n,t)}class Y extends r{constructor(){super(),this.pos=null,this.rect=null}}function G(n=0,t=0,e=0,l=0){let r=new Y;return r.pos=O(r.id,n,t),r.rect=D(0,0,e,l),W(r.rect,n,t),r}function q(n=null,t=null){return X(n.rect,t)}function J(n=null,t=null){return function(n=null,t=null){return I(n.x-t.x,n.y-t.y)}(t,T(n.rect))}var K={ctx:null,canvas:null,fps:0,tick:0};function N(){return K}var Q=N();Math.PI;function V(n,t=0,e=0,l=0,r=0,i=0,u=0,o=0,c=0){Q.ctx.drawImage(n,t,e,l,r,i,u,o,c)}class Z extends c{onUpdate(n=0){m(H,n=>{let t=function(n=0){return L(n).pos}(n.entityId);W(n.displayArea,t.x,t.y),function(n=null){let t=Mn(),e=n.displayArea;if(!q(t,e))return;let l=J(t,T(e)),r=n.spriteFrame.textureArea;V(n.spriteFrame.bitmapData,r.x,r.y,r.width,r.height,l.x,l.y,z(e),A(e))}(n)})}}var $=null;class nn extends c{onUpdate(n=0){m(GetRectList(),n=>{en(n.rect)})}}var tn=null;function en(n=null){let t=Mn();if(!q(t,n))return;let e=J(t,T(n));!function(n=0,t=0,e=0,l=0){Q.ctx.strokeRect(n,t,e,l)}(e.x,e.y,z(n),A(n))}class ln extends c{onUpdate(n=0){m(M(),n=>{let t=n.vec,e=n.pos;e.x+=t.x,e.y+=t.y,t.x=0,t.y=0})}}var rn=null;var un,on=N();var cn=!1;var sn=null,an=(new Date).getTime();var dn=new Map;rn||(rn=new ln);var fn=null,hn=null;function pn(n=!1){x(fn=p(),(k||(k=new _),k)),x(hn=p(),($||($=new Z),$)),n&&x(hn,(tn||(tn=new nn),tn))}var gn,xn=16,yn=41,wn=0;function mn(n){m(fn,n=>{n.onStart()}),m(hn,n=>{n.onStart()}),n.onStart(),function(n=null){cn=!1,un=n,setInterval(()=>{sn=(new Date).getTime(),cn||un(sn-an),an=(new Date).getTime()},on.tick)}(t=>{(gn+=t)>=xn&&(gn-=xn,n.onUpdate(t),m(fn,n=>{n.onUpdate(t)})),(wn+=t)>=yn&&(wn-=yn,m(hn,n=>{n.onUpdate(t)}))})}new Map;class vn{constructor(n=0,t=0,e=null){this.rowIndex=n,this.colIndex=t,this.data=e}}class _n{constructor(n=0,t=0,e=0,l=0,r=null){this.rows=n,this.columns=t,this.gridWidth=e,this.gridHeight=l,this.grids=r}}function kn(n=null){return n.gridWidth}function Hn(n=null){return n.gridHeight}function bn(n=null){return n.columns*n.gridWidth}function In(n=null){return n.rows*n.gridHeight}class Un{constructor(n=null,t=0,e=0){this.gridmap=n,this.pos=I(t,e)}}function Sn(n=0,t=0,e=0,l=0,r=0,i=0){let u=function(n=0,t=0,e=0,l=0){let r=[];for(let e=0;e<n;e++)for(let n=0;n<t;n++){let t=new vn(e,n);r.push(t)}return new _n(n,t,e,l,r)}(n,t,e,l);return new Un(u,r,i)}function En(n=null){return I(n.pos.x-.5*bn(n.gridmap),n.pos.y-.5*In(n.gridmap))}function jn(n=null){!function(n=0,t=0,e=10){let l=document.getElementById("canvas");l.width=n,l.height=t,K.canvas=l,K.ctx=l.getContext("2d"),K.ctx.strokeStyle="#0000ff",K.fps=e,K.tick=1e3/e}(n.screen.width,n.screen.height,n.fps),n.keyDownHandler&&n.keyUpHanler&&function(n=null,t=null){window.addEventListener("keydown",t=>{let e=t.keyCode;dn.get(e)||(dn.set(e,1),n(t.keyCode))}),window.addEventListener("keyup",n=>{let e=n.keyCode;dn.delete(e),t(n.keyCode)})}(n.keyDownHandler,n.keyUpHanler),n.mousedownHandler&&n.mouseupHandler&&function(n=null,t=null){on.canvas.addEventListener("mousedown",t=>{let e=canvas.getBoundingClientRect(),l=t.clientX-e.left*(canvas.width/e.width),r=t.clientY-e.top*(canvas.height/e.height);n(l,r)}),on.canvas.addEventListener("mouseup",n=>{let e=canvas.getBoundingClientRect(),l=n.clientX-e.left*(canvas.width/e.width),r=n.clientY-e.top*(canvas.height/e.height);t(l,r)})}(n.mousedownHandler,n.mouseupHandler),function(n=null,t=null){let e=n.width?n.width:t.width,l=n.height?n.height:t.height;Ln=G(n.x,n.y,e,l)}(n.camera,n.screen),pn(n.debug),n.tilemap&&function(n=null){(function(n=null,t=null){if(!n||n.columns<=0||!n.data||0==n.data.length||n.gridWidth<=0||n.gridHeight<=0)return null;let e=n.columns,l=parseInt(n.data.length/e);if(l*e!=n.data.length)return console.log("error param: len(grids):",n.data.length," columns:",e),null;let r=Sn(l,e,n.gridWidth,n.gridHeight,n.x,n.y);return t&&function(n=null,t=null){n.grids.forEach(n=>{t(n)})}(r.gridmap,l=>{let i=n.data[l.rowIndex*e+l.colIndex];t(i,r,l)}),r})(n,n.initHandler)}(n.tilemap),n.collide}var Ln=null;function Mn(){return Ln}function On(n=0,t=0,e=0,l=0){let r=D(0,0,e,l);P(r,n,t),en(r)}var Cn=Object.assign(l,{debug:!1,mousedownHandler:function(n=0,t=0){console.log(n,t);let e=function(n=null,t=0,e=0){let l=T(n.rect);return I(l.x+t,l.y+e)}(Mn(),n,t);console.log(e.x,e.y),On(e.x,e.y,5,5)},mouseupHandler:function(){}});Cn.tilemap.initHandler=function(n=0,t=null,e=null){let l=function(n=null,t=null){let e=En(n);return I(e.x+kn(n.gridmap)*(t.colIndex+.5),e.y+Hn(n.gridmap)*(t.rowIndex+.5))}(t,e);console.log(l.x,l.y),On(l.x,l.y,kn(t.gridmap),Hn(t.gridmap)),On(l.x,l.y,2,2)};class Dn{onStart(){}onUpdate(n=0){}}console.log(Cn),function(n,t=null){jn(n),mn(t)}(Cn,new Dn)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,