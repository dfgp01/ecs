!function(t){var n={};function e(r){if(n[r])return n[r].exports;var l=n[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)e.d(r,l,function(n){return t[n]}.bind(null,l));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={screen:{width:800,height:800},fps:60,camera:{x:400,y:400},stage:{width:1800,height:1800}}},function(t,n,e){"use strict";e.r(n);var r=e(0);class l{constructor(){this.id=i()}}var u=1;function i(){return u++}class o{constructor(t=0){this.entityId=t,this.id=t}}class s{constructor(t=0){this.priority=t,this.id=i()}onStart(){}onUpdate(t=0){}onEnd(){}}const c=2;function a(t=null,n=0){t.onUpdate(n)}function d(t=null){t.state=c,t.onEnd()}class f{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class h{constructor(){this.head=new f,this.tail=new f,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function p(){return new h}function x(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let r=t._map.get(n);return r?r.data:(e&&console.error("can't find keyId: ",n),null)}function y(t=null,n=null){return g(t,n,t.tail)}function g(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let r=e.prep,l=new f(n,r,e);return r.next=l,e.prep=l,t._map.set(n.id,l),t._size++,l}function w(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let r=e.prep,l=e.next;r.next=l,l.prep=r,t._size--}function m(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)w(t,t._delList.pop());t._lock=!1}var v=p();class k extends s{onUpdate(t=0){m(v,n=>{a(n,t),n.isEnd()&&d(n)})}}var _=null;p();var b=p();class H{constructor(t=0,n=0){this.x=t,this.y=n}}function I(t=0,n=0){return new H(t,n)}function U(t=null,n=null){return I(t.x-n.x,t.y-n.y)}class S{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function M(t=0,n=0){return new S(t,n)}class P extends o{constructor(t=0,n=0,e=0){super(t),this.pos=I(n,e),this.vec=M()}}var E=p();function L(t=0){let n=x(E,t);return n||function(t=0){let n=new P(t);return y(E,n),n}(t)}function T(){return E}function j(t=0,n=0,e=0){let r=L(t).pos;return r.x=n,r.y=e,r}function O(){return T()}class R{constructor(t=null,n=0,e=0,r=null){this.offset=t,this.width=n,this.height=e,this.center=r}}function C(t=0,n=0,e=0,r=0){let l=M(t,n);return new R(l,e,r,I())}function D(t=null,n=0,e=0){t.center.x=n+t.offset.x,t.center.y=e+t.offset.y}function G(t=null){return I(t.center.x-W(t),t.center.y-z(t))}function W(t=null){return.5*t.width}function z(t=null){return.5*t.height}class A extends l{constructor(){super(),this.pos=null,this.rect=null}}function F(t=0,n=0,e=0,r=0){let l=new A;return l.pos=j(l.id,t,n),l.rect=C(0,0,e,r),D(l.rect,t,n),l}function B(t=null,n=null){return IsRectsCross(t.rect,n)}var N={ctx:null,canvas:null,fps:0,tick:0};function q(){return N}var J=q();Math.PI;function K(t,n=0,e=0,r=0,l=0,u=0,i=0,o=0,s=0){J.ctx.drawImage(t,n,e,r,l,u,i,o,s)}function Q(t=0,n=0,e=0,r=0){J.ctx.strokeRect(t,n,e,r)}class V extends s{onUpdate(t=0){m(b,t=>{let n=function(t=0){return L(t).pos}(t.entityId);D(t.displayArea,n.x,n.y),function(t=null){let n=gt(),e=t.displayArea;if(!B(n,e))return;let r=U(G(e),G(n.rect)),l=t.spriteFrame.textureArea;K(t.spriteFrame.bitmapData,l.x,l.y,l.width,l.height,r.x,r.y,GetRectWidth(e),GetRectHeight(e))}(t)})}}var X=null;class Y extends s{onUpdate(t=0){m(GetRectList(),t=>{!function(t=null){let n=gt();if(!B(n,t))return;let e=U(G(t),G(n.rect));Q(e.x,e.y,GetRectWidth(t),GetRectHeight(t))}(t.rect)})}}var Z=null;class $ extends s{onUpdate(t=0){m(O(),t=>{let n=t.vec,e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var tt=null;var nt,et=q();var rt=!1;var lt=null,ut=(new Date).getTime();var it=new Map;tt||(tt=new $);var ot=null,st=null;function ct(t=!1){y(ot=p(),(_||(_=new k),_)),y(st=p(),(X||(X=new V),X)),t&&y(st,(Z||(Z=new Y),Z))}var at,dt=16,ft=41,ht=0;function pt(t){m(ot,t=>{t.onStart()}),m(st,t=>{t.onStart()}),t.onStart(),function(t=null){rt=!1,nt=t,setInterval(()=>{lt=(new Date).getTime(),rt||nt(lt-ut),ut=(new Date).getTime()},et.tick)}(n=>{(at+=n)>=dt&&(at-=dt,t.onUpdate(n),m(ot,t=>{t.onUpdate(n)})),(ht+=n)>=ft&&(ht-=ft,m(st,t=>{t.onUpdate(n)}))})}new Map;function xt(t=null){!function(t=0,n=0,e=10){let r=document.getElementById("canvas");r.width=t,r.height=n,N.canvas=r,N.ctx=r.getContext("2d"),N.ctx.strokeStyle="#0000ff",N.fps=e,N.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;it.get(e)||(it.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;it.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){et.canvas.addEventListener("mousedown",n=>{t(n.x,n.y)}),et.canvas.addEventListener("mouseup",t=>{n(t.x,t.y)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,r=t.height?t.height:n.height;yt=F(t.x,t.y,e,r)}(t.camera,t.screen),ct(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,r=parseInt(t.data.length/e);if(r*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let l=NewTileMap(r,e,t.gridWidth,t.gridHeight,t.x,t.y,n);return n&&IteratorGridmap(l.gridmap,r=>{let l=t.data[r.rowIndex*e+r.colIndex];n(l,r)}),l})(t,t.initHandler)}(t.tilemap),t.collide}var yt=null;function gt(){return yt}class wt{constructor(t=0,n=0,e=0){this.a=t,this.b=n,this.c=e}}class mt{constructor(t=null,n=null){this.start=t,this.vec=n,this.end=I(t.x+n.x,t.y+n.y),this.formula=null}}function vt(t=0,n=0,e=0,r=0){return kt(t,n,function(t=0,n=0,e=0,r=0){return new M(e-t,r-n)}(t,n,e,r))}function kt(t=0,n=0,e=null){if(0==function(t=null){return t.distance}(e))return null;let r=new mt(I(t,n),e),l=function(t=null){let n=t.end.y,e=t.start.y,r=t.end.x,l=t.start.x;return new wt(n-e,l-r,r*e-l*n)}(r);return r.formula=l,r}function _t(t=null,n=null){return function(t=null,n=null){let e=t.a,r=t.b,l=t.c,u=n.a,i=n.b,o=n.c,s=e*i-u*r;return 0==s?null:I((o*r-l*i)/s,(l*u-o*e)/s)}(t.formula,n.formula)}function bt(t=0,n=0,e=0,r=0){!function(t=0,n=0,e=0,r=0){let l=J.ctx;l.beginPath(),l.moveTo(t,n),l.lineTo(e,r),l.stroke()}(t,n,e,r)}function Ht(t=0,n=0,e=0){!function(t=0,n=0,e=0){let r=J.ctx;r.beginPath(),r.arc(t,n,e,0,2*Math.PI),r.stroke()}(t,n,e)}var It,Ut,St,Mt={debug:!1,fps:r.fps,screen:{width:r.screen.width,height:r.screen.height},stage:{width:r.stage.width,height:r.stage.height},camera:{x:r.camera.x,y:r.camera.y},mousedownHandler:function(t=0,n=0){It=I(t,n)},mouseupHandler:function(t=0,n=0){if(!It)return;Ut?St=vt(It.x,It.y,t,n):Ut=vt(It.x,It.y,t,n);if(bt(It.x,It.y,t,n),Ut&&St){let t=_t(Ut,St);console.log(t),Ht(t.x,t.y,10)}It=null}};class Pt{onStart(){}onUpdate(t=0){}}console.log(Mt),function(t,n=null){xt(t),pt(n)}(Mt,new Pt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,