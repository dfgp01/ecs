!function(t){var n={};function e(r){if(n[r])return n[r].exports;var l=n[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)e.d(r,l,function(n){return t[n]}.bind(null,l));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={screen:{width:400,height:400},fps:60,camera:{x:0,y:0},stage:{width:1800,height:1800},tilemap:{data:[0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0],columns:10,gridWidth:40,gridHeight:40}}},function(t,n,e){"use strict";e.r(n);var r=e(0);class l{constructor(){this.id=i()}}var u=1;function i(){return u++}class c{constructor(t=0){this.entityId=t,this.id=t}}class o{constructor(t=0){this.priority=t,this.id=i()}onStart(){}onUpdate(t=0){}onEnd(){}}const s=2;function a(t=null,n=0){t.onUpdate(n)}function d(t=null){t.state=s,t.onEnd()}class f{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class h{constructor(){this.head=new f,this.tail=new f,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function p(){return new h}function x(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let r=t._map.get(n);return r?r.data:(e&&console.error("can't find keyId: ",n),null)}function y(t=null,n=null){return g(t,n,t.tail)}function g(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let r=e.prep,l=new f(n,r,e);return r.next=l,e.prep=l,t._map.set(n.id,l),t._size++,l}function w(t=null,n=0){t&&0!=n?t._lock?t._delList.push(n):v(t,n):console.error("error param: ",t,n)}function v(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let r=e.prep,l=e.next;r.next=l,l.prep=r,t._size--}function m(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)v(t,t._delList.pop());t._lock=!1}var k=p();class b extends o{onUpdate(t=0){m(k,n=>{a(n,t),n.isEnd()&&d(n)})}}var _=null;class H{constructor(t=0,n=0){this.x=t,this.y=n}}function U(t=0,n=0){return new H(t,n)}class I{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function L(t=0,n=0){return new I(t,n)}class P{constructor(t=null,n=0,e=0,r=null){this.offset=t,this.width=n,this.height=e,this.center=r}}function E(t=0,n=0,e=0,r=0){if(0==e||0==r)return null;let l=L(t,n);return new P(l,e,r,U())}function S(t=null){return U(t.center.x-O(t),t.center.y-C(t))}function B(t=null){return U(t.center.x+O(t),t.center.y+C(t))}function M(t=null){return t.width}function j(t=null){return t.height}function O(t=null){return.5*t.width}function C(t=null){return.5*t.height}class D{constructor(t=null,n=0,e=0,r=null){this.unitPos=t,this.offset=L(n,e),this.rect=r}}function G(t=null,n=0,e=0,r=null){return t&&r?new D(t,n,e,r):null}function R(t=null){return U(t.unitPos.x+t.offset.x,t.unitPos.y+t.offset.y)}function W(t=null){let n=R(t);return U(n.x-O(t.rect),n.y-C(t.rect))}function T(t=null){let n=R(t);return U(n.x+O(t.rect),n.y+C(t.rect))}new Map;class z extends c{constructor(t=0,n=0,e=0){super(t),this.pos=U(n,e),this.vec=L()}}var A=p();function F(t=0){let n=x(A,t);return n||function(t=0){let n=new z(t);return y(A,n),n}(t)}function X(){return A}function Y(t=0,n=0,e=0){let r=F(t).pos;return r.x=n,r.y=e,r}function q(t=0){return F(t).pos}p();var J=p();function K(t=0){return t>=0?t:-t}function N(t=0,n=0){return t>n?t:n}function Q(t=0,n=0){return t<n?t:n}function V(t=null,n=null){let e=R(t),r=R(n);return!(K(e.x-r.x)>O(t.rect)+O(n.rect))&&!(K(e.y-r.y)>C(t.rect)+C(n.rect))}function Z(t=null,n=0,e=0){t.unitPos.x=n-t.offset.x,t.unitPos.y=e-t.offset.y}class $ extends l{constructor(){super(),this.pos=null,this.rect=null}}function tt(t=0,n=0,e=0,r=0){let l=new $;return l.pos=Y(l.id,t,n),l.rect=G(l.pos,0,0,E(0,0,e,r)),l}function nt(t=null,n=null){return V(t.rect,n)}function et(t=null,n=null){return function(t=null,n=null){return U(t.x-n.x,t.y-n.y)}(n,W(t.rect))}const rt=87,lt=65,ut=83,it=68;var ct={ctx:null,canvas:null,fps:0,tick:0};function ot(){return ct}var st=ot();Math.PI;function at(t=null,n=null){return!!function(t=null,n=null){let e=S(t),r=S(n),l=B(t),u=B(n),i=e.x,c=r.x,o=i>c?i:c,s=l.x,a=u.x,d=s<a?s:a;if(d<o)return null;let f=e.y,h=r.y,p=f>h?f:h,x=l.y,y=u.y,g=x<y?x:y;return g<p?null:E(0,0,d-o,g-p)}(t,n)}class dt extends l{constructor(t=0,n=null,e=0){super(),this.entityId=t,this.rect=n,this.tag=e}}class ft extends o{constructor(t=null){this.callback=t}check(t=0,n=null,e=null){return!!at(n.rect,e.rect)&&(this.callback(t,n,e),!0)}}var ht=p();function pt(){return ht}var xt=p();function yt(){return xt}class gt extends o{onUpdate(t=0){!function(){let t=st.canvas;st.ctx.clearRect(0,0,t.width,t.height)}(),m(J,t=>{let n=q(t.entityId);UpdateRectPosByUnit(t.displayArea,n.x,n.y),function(t=null){let n=mn(),e=t.displayArea;if(!nt(n,e))return;let r=et(n,GetRectStartPos(e)),l=t.spriteFrame.textureArea;!function(t,n=0,e=0,r=0,l=0,u=0,i=0,c=0,o=0){st.ctx.drawImage(t,n,e,r,l,u,i,c,o)}(t.spriteFrame.bitmapData,l.x,l.y,l.width,l.height,r.x,r.y,M(e),j(e))}(t)})}}var wt=null;class vt extends o{onUpdate(t=0){m(yt(),t=>{kt(t.rect)}),m(pt(),t=>{kt(t.rect)})}}var mt=null;function kt(t=null){let n=mn();if(!nt(n,t))return;let e=et(n,W(t));!function(t=0,n=0,e=0,r=0){st.ctx.strokeRect(t,n,e,r)}(e.x,e.y,M(t.rect),j(t.rect))}class bt extends o{onUpdate(t=0){m(X(),t=>{let n=t.vec,e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var _t=null;var Ht,Ut=ot();var It=!1;var Lt=null,Pt=(new Date).getTime();var Et=new Map;_t||(_t=new bt);var St=null,Bt=null;function Mt(t=!1){y(St=p(),(_||(_=new b),_)),y(Bt=p(),(wt||(wt=new gt),wt)),t&&y(Bt,(mt||(mt=new vt),mt))}var jt=16,Ot=41,Ct=0,Dt=0;function Gt(t){m(St,t=>{t.onStart()}),m(Bt,t=>{t.onStart()}),t.onStart(),function(t=null){It=!1,Ht=t,setInterval(()=>{Lt=(new Date).getTime(),It||Ht(Lt-Pt),Pt=(new Date).getTime()},Ut.tick)}(n=>{(Ct+=n)>=jt&&(Ct-=jt,t.onUpdate(n),m(St,t=>{t.onUpdate(n)})),(Dt+=n)>=Ot&&(Dt-=Ot,m(Bt,t=>{t.onUpdate(n)}))})}function Rt(t=null){t&&function(t=null,n=null){let e=n&&n.priority?n.priority:0,r=t.head.next;for(;r!=t.tail&&!(e>r.data.priority);)r=r.next;g(t,n,r)}(St,t)}class Wt{constructor(t=0,n=0,e=null){this.rowIndex=t,this.colIndex=n,this.data=e}}class Tt{constructor(t=0,n=0,e=0,r=0,l=null){this.rows=t,this.columns=n,this.gridWidth=e,this.gridHeight=r,this.grids=l}}function zt(t=null){return t.gridWidth}function At(t=null){return t.gridHeight}function Ft(t=null){return t.columns*t.gridWidth}function Xt(t=null){return t.rows*t.gridHeight}class Yt{constructor(t=null,n=0,e=0){this.gridmap=t,this.pos=U(n,e)}}function qt(t=0,n=0,e=0,r=0,l=0,u=0){let i=function(t=0,n=0,e=0,r=0){let l=[];for(let e=0;e<t;e++)for(let t=0;t<n;t++){let n=new Wt(e,t);l.push(n)}return new Tt(t,n,e,r,l)}(t,n,e,r);return new Yt(i,l,u)}function Jt(t=null){return U(t.pos.x-.5*Ft(t.gridmap),t.pos.y-.5*Xt(t.gridmap))}class Kt{constructor(t=0,n=null,e=0,r=null){this.type1=t,this.type2=e,this.team1=n,this.team2=r,this.mask=t|e,this.id=this.mask}}var Nt=new Map;function Qt(t=0){let n=Nt.get(t);return n||(n=new Link,Nt.set(t,n)),n}var Vt=p();class Zt extends ft{constructor(t=null){super(t)}onUpdate(t=0){m(Vt,n=>{n.mask==n.type1?function(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail;){let r=e.next;for(;r!=t.tail;)n(e.data,r.data),r=r.next;e=e.next}t._lock=!1,t._delList.forEach(n=>{w(t,n)})}(n.team1,(e,r)=>{super.check(t,e,r,n.type1,n.type2)}):m(n.team1,e=>{m(n.team2,r=>{super.check(t,e,r,n.type1,n.type2)})})})}}var $t=null;p();p();p();class tn extends o{onUpdate(t=0){m(pt(),t=>{(function(t=null){if(0==(hn=function(t=0){return F(t).vec}(t.entityId)).x&&0==hn.y)return!1;pn=O(t.rect.rect),xn=C(t.rect.rect);let n=R(t.rect);en=n.x,rn=n.y;let e=W(t.rect);sn=U(e.x-hn.x,e.y-hn.y);let r=T(t.rect);return an=U(r.x-hn.x,r.y-hn.y),ln=r.x,un=e.x,cn=r.y,on=e.y,!0})(t)&&(m(yt(),n=>{!function(t=null,n=null){if(!V(t.rect,n.rect))return;(function(t=null){dn=W(t.rect),fn=T(t.rect)})(n),function(){if(0==hn.x)return!1;if(!function(){let t=N(sn.y,dn.y);return Q(an.y,fn.y)>t}())return!1;return function(){hn.x>0?dn.x<ln&&(ln=dn.x):fn.x>un&&(un=fn.x);return!0}()}()||function(){if(0==hn.y)return!1;if(!function(){let t=N(sn.x,dn.x);return Q(an.x,fn.x)>t}())return!1;(function(){hn.y>0?dn.y<cn&&(cn=dn.y):fn.y>on&&(on=fn.y)})()}()}(t,n)}),function(t=null){let n=0;n=hn.x>0?ln-pn:hn.x<0?un+pn:en;let e=0;e=hn.y>0?cn-xn:hn.y<0?on+xn:rn;Z(t.rect,n,e)}(t))})}}var nn=null;var en=0,rn=0,ln=0,un=0,cn=0,on=0,sn=null,an=null,dn=null,fn=null,hn=null,pn=0,xn=0;var yn={useGroup:!1,pairs:[],useBox:!1,callback:null,sysList:[]};function gn(t=null){yn.useGroup=t.useGroup?t.useGroup:yn.useGroup,yn.pairs=t.pairs?t.pairs:yn.pairs,yn.useBox=t.useBox?t.useBox:yn.useBox,yn.callback=t.callback,yn.useBox&&yn.sysList.push(function(t=null){return nn||(nn=new tn(t)),nn}(t.callback)),yn.useGroup&&(yn.sysList.push(function(t=null){return $t||($t=new Zt(t)),$t}(t.callback)),yn.pairs.forEach(t=>{!function(t=0,n=0){let e=Qt(t),r=Qt(n),l=new Kt(t,e,n,r);y(Vt,l)}(t[0],t[1])})),yn.sysList.forEach(t=>{Rt(t)})}function wn(t=null){!function(t=0,n=0,e=10){let r=document.getElementById("canvas");r.width=t,r.height=n,ct.canvas=r,ct.ctx=r.getContext("2d"),ct.ctx.strokeStyle="#0000ff",ct.fps=e,ct.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;Et.get(e)||(Et.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;Et.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){Ut.canvas.addEventListener("mousedown",n=>{let e=canvas.getBoundingClientRect(),r=n.clientX-e.left*(canvas.width/e.width),l=n.clientY-e.top*(canvas.height/e.height);t(r,l)}),Ut.canvas.addEventListener("mouseup",t=>{let e=canvas.getBoundingClientRect(),r=t.clientX-e.left*(canvas.width/e.width),l=t.clientY-e.top*(canvas.height/e.height);n(r,l)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,r=t.height?t.height:n.height;vn=tt(t.x,t.y,e,r)}(t.camera,t.screen),Mt(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,r=parseInt(t.data.length/e);if(r*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let l=qt(r,e,t.gridWidth,t.gridHeight,t.x,t.y);return n&&function(t=null,n=null){t.grids.forEach(t=>{n(t)})}(l.gridmap,r=>{let u=t.data[r.rowIndex*e+r.colIndex];n(u,l,r)}),l})(t,t.initHandler)}(t.tilemap),t.collide&&gn(t.collide)}var vn=null;function mn(){return vn}var kn=Object.assign(r,{debug:!0,collide:{useBox:!0},keyDownHandler:function(t=0){switch(t){case rt:Hn|=8;break;case lt:Hn|=2;break;case ut:Hn|=4;break;case it:Hn|=1}},keyUpHanler:function(t=0){switch(t){case rt:Hn&=7;break;case lt:Hn&=13;break;case ut:Hn&=11;break;case it:Hn&=14}}});kn.tilemap.initHandler=function(t=0,n=null,e=null){let r=function(t=null,n=null){let e=Jt(t);return U(e.x+zt(t.gridmap)*(n.colIndex+.5),e.y+At(t.gridmap)*(n.rowIndex+.5))}(n,e);1==t?function(t=0,n=0,e=0,r=0){!function(t=0,n=null,e=0){let r=new dt(t,n,e);y(xt,r)}((new l).id,G(U(t,n),0,0,E(0,0,e,r)))}(r.x,r.y,zt(n.gridmap),At(n.gridmap)):2==t&&function(t=0,n=0){bn=(new l).id,_n=Y(bn,t,n),function(t=0,n=null,e=0){let r=new dt(t,n,e);y(ht,r)}(bn,G(_n,0,0,E(0,0,25,25)))}(r.x,r.y)};var bn=0,_n=null;var Hn=0;var Un=4;class In{onStart(){}onUpdate(t=0){!function(t=0,n=0,e=0){let r=F(t);r.vec.x=n,r.vec.y=e,r.pos.x+=n,r.pos.y+=e}(bn,1&Hn?Un:2&Hn?-Un:0,4&Hn?Un:8&Hn?-Un:0)}}console.log(kn),function(t,n=null){wn(t),Gt(n)}(kn,new In)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,