!function(n){var t={};function e(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return n[r].call(u.exports,u,u.exports,e),u.l=!0,u.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var u in n)e.d(r,u,function(t){return n[t]}.bind(null,u));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=1)}([function(n){n.exports={screen:{width:800,height:800},fps:60,camera:{x:400,y:400},stage:{width:1800,height:1800}}},function(n,t,e){"use strict";e.r(t);var r=e(0);class u{constructor(n=0){this.entityId=n,this.id=n}}class l{onStart(){}onUpdate(n=0){}onEnd(){}}const i=2;class o{constructor(n=null,t=null,e=null){this.data=n,this.prep=t,this.next=e,this.id=0}}function c(n=null,t=0,e=!1){if(!n)return void console.error("link is null.");let r=n._map.get(t);return r?r.data:(e&&console.error("can't find keyId: ",t),null)}function s(n=null,t=null){if(!n||!t)return void console.error("error param: ",n,t,t.id);if(n._map.get(t.id))return void console.error("error keyId:%d is exist",t.id);let e=n.tail.prep,r=n.tail,u=new o(t,e,r);u.id=t.id,e.next=u,r.prep=u,n._map.set(t.id,u),n._size++}function a(n=null,t=0){n&&0!=t?n._curr.id!=t?function(n=null,t=0){let e=n._map.get(t);if(!e)return;n._map.delete(t);let r=e.prep,u=e.next;r.next=u,u.prep=r,n._size--}(n,t):n._delList.push(t):console.error("error param: ",n,t)}function f(n=null,t=null){if(n&&t){for(n._curr=n.head.next;n._curr!=n.tail&&!t(n._curr.data);)n._curr=node.next;for(;n._delList.length>0;)a(n,n._delList.pop())}}var d=new Link;class p extends l{onUpdate(n=0){f(d,t=>{!function(n=null,t=0){n.onUpdate(t)}(t,n),t.isEnd()&&function(n=null){n.state=i,n.onEnd()}(t)})}}var h=null;new Link;var x=new Link;class y{constructor(n=0,t=0){this.x=n,this.y=t}}function g(n=0,t=0){return new y(n,t)}function w(n=null,t=null){return g(n.x-t.x,n.y-t.y)}class v{constructor(n=0,t=0){this.x=n,this.y=t,this.distance=n*n+t*t}}function m(n=0,t=0){return new v(n,t)}class _ extends u{constructor(n=0,t=0,e=0){super(n),this.pos=g(t,e),this.vec=m()}}var b=new Link;function k(n=0){let t=c(b,n);return t||function(n=0){let t=new _(n);return s(b,t),t}(n)}function L(){return b}function M(){return L()}function P(n=null,t=0,e=0){n.center.x=t+n.offset.x,n.center.y=e+n.offset.y}function j(n=null){return g(n.center.x-I(n),n.center.y-O(n))}function I(n=null){return.5*n.width}function O(n=null){return.5*n.height}function S(n=null,t=null){return IsRectsCross(n.rect,t)}class U extends l{onUpdate(n=0){f(x,n=>{let t=function(n=0){return k(n).pos}(n.entityId);P(n.displayArea,t.x,t.y),function(n=null){let t=z(),e=n.displayArea;if(!S(t,e))return;let r=w(j(e),j(t.rect));DrawFrame(n.spriteFrame,r.x,r.y,GetRectWidth(e),GetRectHeight(e))}(n)})}}var E=null;class D extends l{onUpdate(n=0){f(M(),n=>{let t=n.vec,e=n.pos;e.x+=t.x,e.y+=t.y,t.x=0,t.y=0})}}var H=null;getEngine();(new Date).getTime();new Map;H||(H=new D),h||(h=new p),E||(E=new U);var R={ctx:null,canvas:null,fps:0,tick:0};var T=null;function z(){return T}class A{constructor(n=0,t=0,e=0){this.a=n,this.b=t,this.c=e}}class F{constructor(n=null,t=null){this.start=n,this.vec=t,this.end=g(n.x+t.x,n.y+t.y),this.formula=null}}function G(n=0,t=0,e=0,r=0){return C(n,t,function(n=0,t=0,e=0,r=0){return new m(e-n,r-t)}(n,t,e,r))}function C(n=0,t=0,e=null){if(0==function(n=null){return n.distance}(e))return null;let r=new F(g(n,t),e),u=function(n=null){let t=n.end.y,e=n.start.y,r=n.end.x,u=n.start.x;return new A(t-e,u-r,r*e-u*t)}(r);return r.formula=u,r}function W(n=null,t=null){return function(n=null,t=null){let e=n.a,r=n.b,u=n.c,l=t.a,i=t.b,o=t.c,c=e*i-l*r;return 0==c?null:g((o*r-u*i)/c,(u*l-o*e)/c)}(n.formula,t.formula)}var q=R;Math.PI;new Map;function B(n=0,t=0,e=0){!function(n=0,t=0,e=0){let r=q.ctx;r.beginPath(),r.arc(n,t,e,0,2*Math.PI),r.stroke()}(n,t,e)}var J,K,N,Q={debug:!1,fps:r.fps,screen:{width:r.screen.width,height:r.screen.height},stage:{width:r.stage.width,height:r.stage.height},camera:{x:r.camera.x,y:r.camera.y},mousedownHandler:function(n=0,t=0){J=g(n,t)},mouseupHandler:function(n=0,t=0){if(!J)return;K?N=G(J.x,J.y,n,t):K=G(J.x,J.y,n,t);if(DrawLine(J.x,J.y,n,t),K&&N){let n=W(K,N);console.log(n),B(n.x,n.y,10)}J=null}};class V{onStart(){}onUpdate(n=0){}}console.log(Q),(void 0)(Q,new V)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,