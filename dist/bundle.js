!function(t){var n={};function e(l){if(n[l])return n[l].exports;var r=n[l]={i:l,l:!1,exports:{}};return t[l].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,l){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:l})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var l=Object.create(null);if(e.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(l,r,function(n){return t[n]}.bind(null,r));return l},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={screen:{width:400,height:400},fps:60,camera:{x:0,y:0},stage:{width:1800,height:1800},tilemap:{data:[0,1,1,1,1,1,1,1,0,0,0,1,0,2,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0],columns:10,gridWidth:40,gridHeight:40}}},function(t,n,e){"use strict";e.r(n);var l=e(0);class r{constructor(){this.id=i()}}var u=1;function i(){return u++}class o{constructor(t=0){this.entityId=t,this.id=t}}class c{constructor(t=0){this.priority=t,this.id=i()}onStart(){}onUpdate(t=0){}onEnd(){}}const s=2;function a(t=null,n=0){t.onUpdate(n)}function d(t=null){t.state=s,t.onEnd()}class f{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class h{constructor(){this.head=new f,this.tail=new f,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function p(){return new h}function x(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let l=t._map.get(n);return l?l.data:(e&&console.error("can't find keyId: ",n),null)}function y(t=null,n=null){return g(t,n,t.tail)}function g(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let l=e.prep,r=new f(n,l,e);return l.next=r,e.prep=r,t._map.set(n.id,r),t._size++,r}function w(t=null,n=0){t&&0!=n?t._lock?t._delList.push(n):m(t,n):console.error("error param: ",t,n)}function m(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let l=e.prep,r=e.next;l.next=r,r.prep=l,t._size--}function v(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)m(t,t._delList.pop());t._lock=!1}var k=p();class b extends c{onUpdate(t=0){v(k,n=>{a(n,t),n.isEnd()&&d(n)})}}var _=null;class H{constructor(t=0,n=0){this.x=t,this.y=n}}function U(t=0,n=0){return new H(t,n)}class I{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function L(t=0,n=0){return new I(t,n)}class P{constructor(t=null,n=0,e=0,l=null){this.offset=t,this.width=n,this.height=e,this.center=l}}function E(t=0,n=0,e=0,l=0){if(0==e||0==l)return null;let r=L(t,n);return new P(r,e,l,U())}function S(t=null){return U(t.center.x-O(t),t.center.y-C(t))}function B(t=null){return U(t.center.x+O(t),t.center.y+C(t))}function M(t=null){return t.width}function j(t=null){return t.height}function O(t=null){return.5*t.width}function C(t=null){return.5*t.height}function D(t=null){return t.width*t.height}class G{constructor(t=null,n=0,e=0,l=null){this.unitPos=t,this.offset=L(n,e),this.rect=l}}function R(t=null,n=0,e=0,l=null){return t&&l?new G(t,n,e,l):null}function W(t=null){return U(t.unitPos.x+t.offset.x,t.unitPos.y+t.offset.y)}function T(t=null){let n=W(t);return U(n.x-O(t.rect),n.y-C(t.rect))}function z(t=null){let n=W(t);return U(n.x+O(t.rect),n.y+C(t.rect))}new Map;class A extends o{constructor(t=0,n=0,e=0){super(t),this.pos=U(n,e),this.vec=L()}}var F=p();function X(t=0){let n=x(F,t);return n||function(t=0){let n=new A(t);return y(F,n),n}(t)}function Y(){return F}function q(t=0,n=0,e=0){let l=X(t).pos;return l.x=n,l.y=e,l}function J(t=0){return X(t).pos}p();var K=p();function N(t=null,n=null){let e=T(t),l=T(n),r=z(t),u=z(n),i=e.x,o=l.x,c=i>o?i:o,s=r.x,a=u.x,d=s<a?s:a;if(d<c)return null;let f=e.y,h=l.y,p=f>h?f:h,x=r.y,y=u.y,g=x<y?x:y;if(g<p)return null;let w=E(0,0,d-c,g-p);return w?R(U(c+O(w),p+C(w)),0,0,w):null}function Q(t=null,n=0,e=0){t.unitPos.x=n-t.offset.x,t.unitPos.y=e-t.offset.y}class V extends r{constructor(){super(),this.pos=null,this.rect=null}}function Z(t=0,n=0,e=0,l=0){let r=new V;return r.pos=q(r.id,t,n),r.rect=R(r.pos,0,0,E(0,0,e,l)),r}function $(t=null,n=null){return function(t=null,n=null){return!!N(t,n)}(t.rect,n)}function tt(t=null,n=null){return function(t=null,n=null){return U(t.x-n.x,t.y-n.y)}(n,T(t.rect))}const nt=87,et=65,lt=83,rt=68;var ut={ctx:null,canvas:null,fps:0,tick:0};function it(){return ut}var ot=it();Math.PI;function ct(t=null,n=null){return!!function(t=null,n=null){let e=S(t),l=S(n),r=B(t),u=B(n),i=e.x,o=l.x,c=i>o?i:o,s=r.x,a=u.x,d=s<a?s:a;if(d<c)return null;let f=e.y,h=l.y,p=f>h?f:h,x=r.y,y=u.y,g=x<y?x:y;return g<p?null:E(0,0,d-c,g-p)}(t,n)}class st extends r{constructor(t=0,n=null,e=0){super(),this.entityId=t,this.rect=n,this.tag=e}}class at extends c{constructor(t=null){this.callback=t}check(t=0,n=null,e=null){return!!ct(n.rect,e.rect)&&(this.callback(t,n,e),!0)}}var dt=p();function ft(){return dt}var ht=p();function pt(){return ht}class xt extends c{onUpdate(t=0){!function(){let t=ot.canvas;ot.ctx.clearRect(0,0,t.width,t.height)}(),v(K,t=>{let n=J(t.entityId);UpdateRectPosByUnit(t.displayArea,n.x,n.y),function(t=null){let n=sn(),e=t.displayArea;if(!$(n,e))return;let l=tt(n,GetRectStartPos(e)),r=t.spriteFrame.textureArea;!function(t,n=0,e=0,l=0,r=0,u=0,i=0,o=0,c=0){ot.ctx.drawImage(t,n,e,l,r,u,i,o,c)}(t.spriteFrame.bitmapData,r.x,r.y,r.width,r.height,l.x,l.y,M(e),j(e))}(t)})}}var yt=null;class gt extends c{onUpdate(t=0){v(pt(),t=>{mt(t.rect)}),v(ft(),t=>{mt(t.rect)})}}var wt=null;function mt(t=null){let n=sn();if(!$(n,t))return;let e=tt(n,T(t));!function(t=0,n=0,e=0,l=0){ot.ctx.strokeRect(t,n,e,l)}(e.x,e.y,M(t.rect),j(t.rect))}class vt extends c{onUpdate(t=0){v(Y(),t=>{let n=t.vec,e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var kt=null;var bt,_t=it();var Ht=!1;var Ut=null,It=(new Date).getTime();var Lt=new Map;kt||(kt=new vt);var Pt=null,Et=null;function St(t=!1){y(Pt=p(),(_||(_=new b),_)),y(Et=p(),(yt||(yt=new xt),yt)),t&&y(Et,(wt||(wt=new gt),wt))}var Bt=16,Mt=41,jt=0,Ot=0;function Ct(t){v(Pt,t=>{t.onStart()}),v(Et,t=>{t.onStart()}),t.onStart(),function(t=null){Ht=!1,bt=t,setInterval(()=>{Ut=(new Date).getTime(),Ht||bt(Ut-It),It=(new Date).getTime()},_t.tick)}(n=>{(jt+=n)>=Bt&&(jt-=Bt,t.onUpdate(n),v(Pt,t=>{t.onUpdate(n)})),(Ot+=n)>=Mt&&(Ot-=Mt,v(Et,t=>{t.onUpdate(n)}))})}function Dt(t=null){t&&function(t=null,n=null){let e=n&&n.priority?n.priority:0,l=t.head.next;for(;l!=t.tail&&!(e>l.data.priority);)l=l.next;g(t,n,l)}(Pt,t)}class Gt{constructor(t=0,n=0,e=null){this.rowIndex=t,this.colIndex=n,this.data=e}}class Rt{constructor(t=0,n=0,e=0,l=0,r=null){this.rows=t,this.columns=n,this.gridWidth=e,this.gridHeight=l,this.grids=r}}function Wt(t=null){return t.gridWidth}function Tt(t=null){return t.gridHeight}function zt(t=null){return t.columns*t.gridWidth}function At(t=null){return t.rows*t.gridHeight}class Ft{constructor(t=null,n=0,e=0){this.gridmap=t,this.pos=U(n,e)}}function Xt(t=0,n=0,e=0,l=0,r=0,u=0){let i=function(t=0,n=0,e=0,l=0){let r=[];for(let e=0;e<t;e++)for(let t=0;t<n;t++){let n=new Gt(e,t);r.push(n)}return new Rt(t,n,e,l,r)}(t,n,e,l);return new Ft(i,r,u)}function Yt(t=null){return U(t.pos.x-.5*zt(t.gridmap),t.pos.y-.5*At(t.gridmap))}class qt{constructor(t=0,n=null,e=0,l=null){this.type1=t,this.type2=e,this.team1=n,this.team2=l,this.mask=t|e,this.id=this.mask}}var Jt=new Map;function Kt(t=0){let n=Jt.get(t);return n||(n=new Link,Jt.set(t,n)),n}var Nt=p();class Qt extends at{constructor(t=null){super(t)}onUpdate(t=0){v(Nt,n=>{n.mask==n.type1?function(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail;){let l=e.next;for(;l!=t.tail;)n(e.data,l.data),l=l.next;e=e.next}t._lock=!1,t._delList.forEach(n=>{w(t,n)})}(n.team1,(e,l)=>{super.check(t,e,l,n.type1,n.type2)}):v(n.team1,e=>{v(n.team2,l=>{super.check(t,e,l,n.type1,n.type2)})})})}}var Vt=null;p();p();p();class Zt extends c{onUpdate(t=0){v(ft(),t=>{v(pt(),n=>{!function(t=null,n=null){let e=N(t.rect,n.rect);if(!e)return;M(e.rect)>j(e.rect)?function(t=null,n=null){let e=D(t);e>tn&&(tn=e,en=n.rect)}(e.rect,n):function(t=null,n=null){let e=D(t);e>nn&&(nn=e,ln=n.rect)}(e.rect,n)}(t,n)}),function(t=null){(function(t=null){if(nn<=0)return;nn=0;let n=t.rect,e=W(n),l=W(ln);e.x<l.x?Q(n,T(ln).x-O(n.rect),e.y):Q(n,z(ln).x+O(n.rect),e.y)})(t),function(t=null){if(tn<=0)return;tn=0;let n=t.rect,e=W(n),l=W(en);e.y<l.y?Q(n,e.x,T(en).y-C(n.rect)):Q(n,e.x,z(en).y+C(n.rect))}(t)}(t)})}}var $t=null;var tn=0,nn=0,en=null,ln=null;var rn={useGroup:!1,pairs:[],useBox:!1,callback:null,sysList:[]};function un(t=null){rn.useGroup=t.useGroup?t.useGroup:rn.useGroup,rn.pairs=t.pairs?t.pairs:rn.pairs,rn.useBox=t.useBox?t.useBox:rn.useBox,rn.callback=t.callback,rn.useBox&&rn.sysList.push(function(t=null){return $t||($t=new Zt(t)),$t}(t.callback)),rn.useGroup&&(rn.sysList.push(function(t=null){return Vt||(Vt=new Qt(t)),Vt}(t.callback)),rn.pairs.forEach(t=>{!function(t=0,n=0){let e=Kt(t),l=Kt(n),r=new qt(t,e,n,l);y(Nt,r)}(t[0],t[1])})),rn.sysList.forEach(t=>{Dt(t)})}function on(t=null){!function(t=0,n=0,e=10){let l=document.getElementById("canvas");l.width=t,l.height=n,ut.canvas=l,ut.ctx=l.getContext("2d"),ut.ctx.strokeStyle="#0000ff",ut.fps=e,ut.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;Lt.get(e)||(Lt.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;Lt.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){_t.canvas.addEventListener("mousedown",n=>{let e=canvas.getBoundingClientRect(),l=n.clientX-e.left*(canvas.width/e.width),r=n.clientY-e.top*(canvas.height/e.height);t(l,r)}),_t.canvas.addEventListener("mouseup",t=>{let e=canvas.getBoundingClientRect(),l=t.clientX-e.left*(canvas.width/e.width),r=t.clientY-e.top*(canvas.height/e.height);n(l,r)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,l=t.height?t.height:n.height;cn=Z(t.x,t.y,e,l)}(t.camera,t.screen),St(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,l=parseInt(t.data.length/e);if(l*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let r=Xt(l,e,t.gridWidth,t.gridHeight,t.x,t.y);return n&&function(t=null,n=null){t.grids.forEach(t=>{n(t)})}(r.gridmap,l=>{let u=t.data[l.rowIndex*e+l.colIndex];n(u,r,l)}),r})(t,t.initHandler)}(t.tilemap),t.collide&&un(t.collide)}var cn=null;function sn(){return cn}var an=Object.assign(l,{debug:!0,collide:{useBox:!0},keyDownHandler:function(t=0){switch(t){case nt:hn|=8;break;case et:hn|=2;break;case lt:hn|=4;break;case rt:hn|=1}},keyUpHanler:function(t=0){switch(t){case nt:hn&=7;break;case et:hn&=13;break;case lt:hn&=11;break;case rt:hn&=14}}});an.tilemap.initHandler=function(t=0,n=null,e=null){let l=function(t=null,n=null){let e=Yt(t);return U(e.x+Wt(t.gridmap)*(n.colIndex+.5),e.y+Tt(t.gridmap)*(n.rowIndex+.5))}(n,e);1==t?function(t=0,n=0,e=0,l=0){!function(t=0,n=null,e=0){let l=new st(t,n,e);y(ht,l)}((new r).id,R(U(t,n),0,0,E(0,0,e,l)))}(l.x,l.y,Wt(n.gridmap),Tt(n.gridmap)):2==t&&function(t=0,n=0){dn=(new r).id,fn=q(dn,t,n),function(t=0,n=null,e=0){let l=new st(t,n,e);y(dt,l)}(dn,R(fn,0,0,E(0,0,25,25)))}(l.x,l.y)};var dn=0,fn=null;var hn=0;var pn=3;class xn{onStart(){}onUpdate(t=0){!function(t=0,n=0,e=0){let l=X(t).pos;l.x+=n,l.y+=e}(dn,1&hn?pn:2&hn?-pn:0,4&hn?pn:8&hn?-pn:0)}}console.log(an),function(t,n=null){on(t),Ct(n)}(an,new xn)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,