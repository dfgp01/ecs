!function(t){var n={};function e(r){if(n[r])return n[r].exports;var l=n[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)e.d(r,l,function(n){return t[n]}.bind(null,l));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t){t.exports={screen:{width:800,height:800},fps:60,camera:{x:0,y:0},stage:{width:1800,height:1800},tilemap:{data:[1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1],columns:6,gridWidth:10,gridHeight:10}}},function(t,n,e){"use strict";e.r(n);var r=e(0);class l{constructor(){this.id=u()}}var i=1;function u(){return i++}class o{constructor(t=0){this.entityId=t,this.id=t}}class s{constructor(t=0){this.priority=t,this.id=u()}onStart(){}onUpdate(t=0){}onEnd(){}}const c=2;function a(t=null,n=0){t.onUpdate(n)}function d(t=null){t.state=c,t.onEnd()}class f{constructor(t=null,n=null,e=null){this.data=t,this.prep=n,this.next=e}}class h{constructor(){this.head=new f,this.tail=new f,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}}function p(){return new h}function g(t=null,n=0,e=!1){if(!t)return void console.error("link is null.");let r=t._map.get(n);return r?r.data:(e&&console.error("can't find keyId: ",n),null)}function x(t=null,n=null){return y(t,n,t.tail)}function y(t=null,n=null,e=null){if(!t||!n||!n.id)return console.error("error param: ",t,n,n.id),null;if(t._map.get(n.id))return console.error("error id:%d is exist",n.id),null;let r=e.prep,l=new f(n,r,e);return r.next=l,e.prep=l,t._map.set(n.id,l),t._size++,l}function w(t=null,n=0){let e=t._map.get(n);if(!e)return;t._map.delete(n);let r=e.prep,l=e.next;r.next=l,l.prep=r,t._size--}function m(t=null,n=null){if(!t||!n)return;t._lock=!0;let e=t.head.next;for(;e!=t.tail&&!n(e.data);)e=e.next;for(;t._delList.length>0;)w(t,t._delList.pop());t._lock=!1}var v=p();class _ extends s{onUpdate(t=0){m(v,n=>{a(n,t),n.isEnd()&&d(n)})}}var k=null;p();var H=p();class b{constructor(t=0,n=0){this.x=t,this.y=n}}function I(t=0,n=0){return new b(t,n)}function U(t=null,n=null){return I(t.x-n.x,t.y-n.y)}class S{constructor(t=0,n=0){this.x=t,this.y=n,this.distance=t*t+n*n}}function E(t=0,n=0){return new S(t,n)}class j extends o{constructor(t=0,n=0,e=0){super(t),this.pos=I(n,e),this.vec=E()}}var L=p();function M(t=0){let n=g(L,t);return n||function(t=0){let n=new j(t);return x(L,n),n}(t)}function O(){return L}function W(t=0,n=0,e=0){let r=M(t).pos;return r.x=n,r.y=e,r}class R{constructor(t=null,n=0,e=0,r=null){this.offset=t,this.width=n,this.height=e,this.center=r}}function C(t=0,n=0,e=0,r=0){let l=E(t,n);return new R(l,e,r,I())}function D(t=null,n=0,e=0){t.center.x=n+t.offset.x,t.center.y=e+t.offset.y}function P(t=null){return I(t.center.x-G(t),t.center.y-T(t))}function G(t=null){return.5*t.width}function T(t=null){return.5*t.height}class z extends l{constructor(){super(),this.pos=null,this.rect=null}}function A(t=0,n=0,e=0,r=0){let l=new z;return l.pos=W(l.id,t,n),l.rect=C(0,0,e,r),D(l.rect,t,n),l}function F(t=null,n=null){return IsRectsCross(t.rect,n)}var B={ctx:null,canvas:null,fps:0,tick:0};function q(){return B}var J=q();Math.PI;function K(t,n=0,e=0,r=0,l=0,i=0,u=0,o=0,s=0){J.ctx.drawImage(t,n,e,r,l,i,u,o,s)}function N(t=0,n=0,e=0,r=0){J.ctx.strokeRect(t,n,e,r)}class Q extends s{onUpdate(t=0){m(H,t=>{let n=function(t=0){return M(t).pos}(t.entityId);D(t.displayArea,n.x,n.y),function(t=null){let n=It(),e=t.displayArea;if(!F(n,e))return;let r=U(P(e),P(n.rect)),l=t.spriteFrame.textureArea;K(t.spriteFrame.bitmapData,l.x,l.y,l.width,l.height,r.x,r.y,GetRectWidth(e),GetRectHeight(e))}(t)})}}var V=null;class X extends s{onUpdate(t=0){m(GetRectList(),t=>{!function(t=null){let n=It();if(!F(n,t))return;let e=U(P(t),P(n.rect));N(e.x,e.y,GetRectWidth(t),GetRectHeight(t))}(t.rect)})}}var Y=null;class Z extends s{onUpdate(t=0){m(O(),t=>{let n=t.vec,e=t.pos;e.x+=n.x,e.y+=n.y,n.x=0,n.y=0})}}var $=null;var tt,nt=q();var et=!1;var rt=null,lt=(new Date).getTime();var it=new Map;$||($=new Z);var ut=null,ot=null;function st(t=!1){x(ut=p(),(k||(k=new _),k)),x(ot=p(),(V||(V=new Q),V)),t&&x(ot,(Y||(Y=new X),Y))}var ct,at=16,dt=41,ft=0;function ht(t){m(ut,t=>{t.onStart()}),m(ot,t=>{t.onStart()}),t.onStart(),function(t=null){et=!1,tt=t,setInterval(()=>{rt=(new Date).getTime(),et||tt(rt-lt),lt=(new Date).getTime()},nt.tick)}(n=>{(ct+=n)>=at&&(ct-=at,t.onUpdate(n),m(ut,t=>{t.onUpdate(n)})),(ft+=n)>=dt&&(ft-=dt,m(ot,t=>{t.onUpdate(n)}))})}new Map;class pt{constructor(t=0,n=0,e=null){this.rowIndex=t,this.colIndex=n,this.data=e}}class gt{constructor(t=0,n=0,e=0,r=0,l=null){this.rows=t,this.columns=n,this.gridWidth=e,this.gridHeight=r,this.grids=l}}function xt(t=null){return t.gridWidth}function yt(t=null){return t.gridHeight}function wt(t=null){return t.columns*t.gridWidth}function mt(t=null){return t.rows*t.gridHeight}class vt{constructor(t=null,n=0,e=0){this.gridmap=t,this.pos=I(n,e)}}function _t(t=0,n=0,e=0,r=0,l=0,i=0){let u=function(t=0,n=0,e=0,r=0){let l=[];for(let e=0;e<t;e++)for(let t=0;t<n;t++){let n=new pt(e,t);l.push(n)}return new gt(t,n,e,r,l)}(t,n,e,r);return new vt(u,l,i)}function kt(t=null){return I(t.pos.x-.5*wt(t.gridmap),t.pos.y-.5*mt(t.gridmap))}function Ht(t=null){!function(t=0,n=0,e=10){let r=document.getElementById("canvas");r.width=t,r.height=n,B.canvas=r,B.ctx=r.getContext("2d"),B.ctx.strokeStyle="#0000ff",B.fps=e,B.tick=1e3/e}(t.screen.width,t.screen.height,t.fps),t.keyDownHandler&&t.keyUpHanler&&function(t=null,n=null){window.addEventListener("keydown",n=>{let e=n.keyCode;it.get(e)||(it.set(e,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let e=t.keyCode;it.delete(e),n(t.keyCode)})}(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&function(t=null,n=null){nt.canvas.addEventListener("mousedown",n=>{t(n.x,n.y)}),nt.canvas.addEventListener("mouseup",t=>{n(t.x,t.y)})}(t.mousedownHandler,t.mouseupHandler),function(t=null,n=null){let e=t.width?t.width:n.width,r=t.height?t.height:n.height;bt=A(t.x,t.y,e,r)}(t.camera,t.screen),st(t.debug),t.tilemap&&function(t=null){(function(t=null,n=null){if(!t||t.columns<=0||!t.data||0==t.data.length||t.gridWidth<=0||t.gridHeight<=0)return null;let e=t.columns,r=parseInt(t.data.length/e);if(r*e!=t.data.length)return console.log("error param: len(grids):",t.data.length," columns:",e),null;let l=_t(r,e,t.gridWidth,t.gridHeight,t.x,t.y);return n&&function(t=null,n=null){t.grids.forEach(t=>{n(t)})}(l.gridmap,r=>{let i=t.data[r.rowIndex*e+r.colIndex];n(i,l,r)}),l})(t,t.initHandler)}(t.tilemap),t.collide}var bt=null;function It(){return bt}var Ut=Object.assign(r,{debug:!1});Ut.tilemap.initHandler=function(t=0,n=null,e=null){let r=function(t=null,n=null){let e=kt(t);return I(e.x+xt(t.gridmap)*(n.colIndex+.5),e.y+yt(t.gridmap)*(n.rowIndex+.5))}(n,e);console.log(r.x,r.y),function(t=0,n=0,e=0,r=0){N(t,n,e,r)}(r.x,r.y,xt(n.gridmap),yt(n.gridmap))};class St{onStart(){}onUpdate(t=0){}}console.log(Ut),function(t,n=null){Ht(t),ht(n)}(Ut,new St)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,